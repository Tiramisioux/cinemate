diff --git a/services/wifi-hotspot/Makefile b/services/wifi-hotspot/Makefile
new file mode 100644
index 0000000000000000000000000000000000000000..989f9df1666f432c15bf02eb2b402cb3689e2ae0
--- /dev/null
+++ b/services/wifi-hotspot/Makefile
@@ -0,0 +1,44 @@
+# Makefile for wifi-hotspot
+PREFIX  ?= /usr/local
+SYSDDIR ?= /etc/systemd/system
+
+SCRIPT  = wifi-hotspot.py
+SERVICE = wifi-hotspot.service
+
+.PHONY: all install enable disable start stop restart status clean uninstall
+
+all:
+	@echo "Nothing to build – use 'make install'"
+
+install:
+	install -m 755 $(SCRIPT)  $(PREFIX)/bin/$(SCRIPT)
+	install -m 644 $(SERVICE) $(SYSDDIR)/$(SERVICE)
+	systemctl daemon-reload
+
+enable: install
+	systemctl enable  $(SERVICE)
+	systemctl start   $(SERVICE)
+
+disable:
+	- systemctl stop    $(SERVICE)
+	- systemctl disable $(SERVICE)
+
+start:
+	systemctl start $(SERVICE)
+
+stop:
+	systemctl stop $(SERVICE)
+
+restart:
+	systemctl restart $(SERVICE)
+
+status:
+	systemctl status $(SERVICE)
+
+clean: disable
+	- rm -f $(PREFIX)/bin/$(SCRIPT)
+	- rm -f $(SYSDDIR)/$(SERVICE)
+	systemctl daemon-reload
+	@echo "Removed $(SERVICE)"
+
+uninstall: clean     # alias for convenience
diff --git a/services/wifi-hotspot/wifi-hotspot.py b/services/wifi-hotspot/wifi-hotspot.py
new file mode 100644
index 0000000000000000000000000000000000000000..a565c9e3f735ae3647542d4cb30c8e3a6cd8d78f
--- /dev/null
+++ b/services/wifi-hotspot/wifi-hotspot.py
@@ -0,0 +1,84 @@
+#!/usr/bin/env python3
+"""Simple watchdog service for a Wi-Fi hotspot.
+
+This script keeps a NetworkManager hotspot active even when the main
+``cinemate`` application is not running.  The SSID and password are
+read from ``/home/pi/cinemate/src/settings.json`` so multiple cameras
+can use different networks.
+"""
+import json
+import logging
+import subprocess
+import time
+from pathlib import Path
+
+SETTINGS_PATH = Path("/home/pi/cinemate/src/settings.json")
+DEFAULT_SSID = "CinePi"
+DEFAULT_PASS = "11111111"  # nmcli minimum
+
+
+def load_credentials(path: Path = SETTINGS_PATH) -> tuple[str, str]:
+    """Return (ssid, password) from *settings.json* with fallbacks."""
+    try:
+        with path.open("r", encoding="utf-8") as fh:
+            cfg = json.load(fh)
+        wifi_cfg = cfg.get("system", {}).get("wifi_hotspot", {})
+        ssid = wifi_cfg.get("name", DEFAULT_SSID) or DEFAULT_SSID
+        pw = wifi_cfg.get("password", DEFAULT_PASS) or DEFAULT_PASS
+        if len(pw) < 8:
+            logging.warning("Password in settings <8 chars – using default")
+            pw = DEFAULT_PASS
+        return ssid, pw
+    except Exception as exc:  # pragma: no cover - best effort
+        logging.error("Failed to load %s: %s", path, exc)
+        return DEFAULT_SSID, DEFAULT_PASS
+
+
+def is_hotspot_active() -> bool:
+    """Return ``True`` if an nmcli hotspot connection is active."""
+    try:
+        res = subprocess.run(
+            ["nmcli", "con", "show", "--active"],
+            capture_output=True, text=True, check=True
+        )
+        return any(
+            "wifi" in line and "Hotspot" in line
+            for line in res.stdout.splitlines()
+        )
+    except subprocess.CalledProcessError as exc:
+        logging.error("Error checking hotspot status: %s", exc)
+        return False
+
+
+def create_hotspot(ssid: str, password: str, iface: str = "wlan0") -> None:
+    """Create a Wi‑Fi hotspot via ``nmcli``."""
+    cmd = [
+        "nmcli", "device", "wifi", "hotspot",
+        "ifname", iface,
+        "ssid", ssid,
+        "password", password,
+    ]
+    try:
+        subprocess.run(cmd, check=True, capture_output=True, text=True)
+        logging.info("Hotspot '%s' started on %s", ssid, iface)
+    except subprocess.CalledProcessError as exc:
+        logging.error("Failed to create hotspot: %s", exc)
+        if exc.stderr:
+            logging.error("nmcli stderr: %s", exc.stderr.strip())
+
+
+def main() -> None:
+    logging.basicConfig(
+        level=logging.INFO,
+        format="%(asctime)s [wifi-hotspot] %(levelname)s: %(message)s",
+    )
+
+    while True:
+        ssid, pw = load_credentials()
+        if not is_hotspot_active():
+            create_hotspot(ssid, pw)
+        time.sleep(60)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/services/wifi-hotspot/wifi-hotspot.service b/services/wifi-hotspot/wifi-hotspot.service
new file mode 100644
index 0000000000000000000000000000000000000000..b81ff2883e5e86f10e7222976daeb8f410d6639c
--- /dev/null
+++ b/services/wifi-hotspot/wifi-hotspot.service
@@ -0,0 +1,13 @@
+[Unit]
+Description=Cinemate Wi-Fi Hotspot Service
+After=network.target
+
+[Service]
+Type=simple
+ExecStart=/usr/bin/python3 /usr/local/bin/wifi-hotspot.py
+Restart=always
+RestartSec=5
+User=root
+
+[Install]
+WantedBy=multi-user.target
