diff --git a/src/main.py b/src/main.py
index 4022150c6777ec4c6347fbfb90fc5e2ff22ed128..4db0577a6a9c75569fe89dcca58c3e8e06feb41a 100644
--- a/src/main.py
+++ b/src/main.py
@@ -42,104 +42,121 @@ SETTINGS_FILE = "/home/pi/cinemate/src/settings.json"
 def hide_cursor():
     try:
         with open('/dev/tty1', 'w') as tty:
             tty.write('\033[?25l')
             tty.flush()
     except Exception as e:
         logging.warning(f"Could not hide cursor: {e}")
 
 def show_cursor():
     try:
         with open('/dev/tty1', 'w') as tty:
             tty.write('\033[?25h')
             tty.flush()
     except Exception as e:
         logging.warning(f"Could not show cursor: {e}")
 
 def clear_screen():
     """Clear tty1 and move the cursor to the top-left corner."""
     try:
         with open('/dev/tty1', 'w') as tty:
             tty.write('\033[2J\033[H')       # CSI 2J = clear; CSI H = home
             tty.flush()
     except Exception as e:
         logging.warning(f"Could not clear screen: {e}")
 
-def start_splash():
+def start_splash(text="THIS IS A COOL MACHINE"):
     stop_event = threading.Event()
 
     big_font = "Lat15-TerminusBold16x32"        # ← choose from your list
     setfont  = shutil.which("setfont")          # /usr/bin/setfont (None if missing)
 
     # Backup current font so we can restore it later
     backup = "/tmp/cinemate.oldfont"
     if setfont:
         subprocess.run([setfont, "-O", backup], check=False)
         subprocess.run([setfont, big_font],      check=False)  # load larger font
 
     def _animate():
         frame = 0
         try:
             with open("/dev/tty1", "w") as tty:
                 tty.write("\033[2J\033[H")          # clear screen
                 tty.write("\033#6")                 # double-WIDTH for this row
                 tty.write("\033#3")                 # double-HEIGHT top half
+                tty.write(text + "\n")
                 tty.flush()
 
                 while not stop_event.is_set():
                     dots = "." * (frame % 4)
                     tty.write(f"\rStarting CineMate {dots:<3}")
                     tty.flush()
                     frame += 1
                     time.sleep(0.4)
 
                 # back to normal size
                 tty.write("\033#5")                 # single width/height
                 tty.flush()
         finally:
             # restore the original console font
             if setfont and os.path.exists(backup):
                 subprocess.run([setfont, backup], check=False)
 
     t = threading.Thread(target=_animate, daemon=True)
     t.start()
     return t, stop_event
 
-def graphic_splash(text="THIS IS A COOL MACHINE"):
-    fb = Framebuffer(0)              # open /dev/fb0
-    W, H = fb.size
+def graphic_splash(text="THIS IS A COOL MACHINE", image_path=None):
+    fb_path = "/dev/fb0"
+    if not os.path.exists(fb_path):
+        logging.info("No HDMI framebuffer found. Skipping graphic splash")
+        return None
 
-    # Pick any TTF you like and a big size
-    font = ImageFont.truetype("/home/pi/cinemate/resources/fonts/DIN2014-Regular.ttf",
-                              size=100)
+    fb = Framebuffer(0)
+    if fb.size == (0, 0):
+        logging.info("Framebuffer not ready. Skipping graphic splash")
+        return None
 
-    img  = Image.new("RGB", (W, H), "black")
-    draw = ImageDraw.Draw(img)
-    tw, th = draw.textbbox((0, 0), text, font=font)[2:]
+    W, H = fb.size
 
-    draw.text(((W - tw)//2, (H - th)//2),
-              text, font=font, fill="white")
+    img = Image.new("RGB", (W, H), "black")
+
+    if image_path and os.path.exists(image_path):
+        try:
+            pic = Image.open(image_path).convert("RGB")
+            pic = pic.resize((W, H))
+            img.paste(pic)
+        except Exception as e:
+            logging.error(f"Failed to load splash image: {e}")
+    else:
+        font = ImageFont.truetype(
+            "/home/pi/cinemate/resources/fonts/DIN2014-Regular.ttf",
+            size=100,
+        )
+        draw = ImageDraw.Draw(img)
+        tw, th = draw.textbbox((0, 0), text, font=font)[2:]
+        draw.text(((W - tw) // 2, (H - th) // 2), text, font=font, fill="white")
 
     fb.show(img)
     return fb        # keep it so you can blank later
 
 def get_raspberry_pi_model():
     try:
         with open('/proc/device-tree/model', 'r') as f:
             model = f.read()
             if 'Raspberry Pi 5' in model:
                 return 'pi5'
             elif 'Raspberry Pi 4' in model:
                 return 'pi4'
             else:
                 return 'other'
     except FileNotFoundError:
         return 'unknown'
 
 def check_hotspot_status():
     result = subprocess.run(['nmcli', 'con', 'show', '--active'], capture_output=True, text=True)
     return any('wifi' in line and 'Hotspot' in line for line in result.stdout.split('\n'))
 
 def setup_logging(debug_mode):
     """
     Configure logging:
     - Clears existing .log files on startup to prevent unbounded growth
@@ -198,51 +215,59 @@ def handle_vu_output(line):
 
             # # Example: push to Redis
             # self.redis_controller.set_value("vu_meter", json.dumps(vu_values))
 
         except Exception as e:
             logging.warning(f"Failed to parse VU line: {line} ({e})")
 
 def main():
     import argparse
 
     parser = argparse.ArgumentParser(description="Run the CinePi application.")
     parser.add_argument("-debug", action="store_true", help="Enable debug logging level.")
     args = parser.parse_args()
 
     # Load settings
     settings = load_settings(SETTINGS_FILE)
 
     # Setup logging
     logger, log_queue = setup_logging(args.debug)
     
     # # Start animated splash on HDMI
     # splash_thread, splash_stop = start_splash()
     
     # Hide cursor
     hide_cursor()
-    fb_splash = graphic_splash()
+
+    splash_thread = splash_stop = None
+
+    welcome_text = settings.get("welcome_message", "THIS IS A COOL MACHINE")
+    welcome_image = settings.get("welcome_image")
+
+    fb_splash = graphic_splash(welcome_text, welcome_image)
+    if fb_splash is None:
+        splash_thread, splash_stop = start_splash(welcome_text)
 
     # Detect Raspberry Pi model
     pi_model = get_raspberry_pi_model()
     logging.info(f"Detected Raspberry Pi model: {pi_model}")
     set
 
     # Start WiFi hotspot if available
 #    start_hotspot()
 
     # Initialize system components
     redis_controller, sensor_detect, ssd_monitor, usb_monitor, gpio_output, dmesg_monitor = initialize_system(settings)
     
     # Store Pi model in Redis
     redis_controller.set_value(ParameterKey.PI_MODEL.value, pi_model)
 
     # Set redis anamorphic factor to default value
     redis_controller.set_value(ParameterKey.ANAMORPHIC_FACTOR.value, settings["anamorphic_preview"]["default_anamorphic_factor"])
     
     # Default zoom factor
     redis_controller.set_value(
         ParameterKey.ZOOM.value,
         settings.get("preview", {}).get("default_zoom", 1.0)
 )
 
     # Reset recording time
@@ -302,92 +327,99 @@ def main():
         stream.start()
         logging.info("Stream module loaded")
     else:
         logging.error("Didn't find Wi-Fi hotspot. Stream module not loaded")
 
     mediator = Mediator(cinepi, cinepi_controller, redis_listener, redis_controller, ssd_monitor, gpio_output, stream, usb_monitor)
     
     # Initialize USB monitoring
     usb_monitor.check_initial_devices()
 
     # Setup Analog Controls
     analog_controls = AnalogControls(
         cinepi_controller, redis_controller,
         settings["analog_controls"]["iso_pot"],
         settings["analog_controls"]["shutter_a_pot"],
         settings["analog_controls"]["fps_pot"],
         settings["analog_controls"]["wb_pot"],
         settings["arrays"]["iso_steps"],
         settings["arrays"]["shutter_a_steps"],
         settings["arrays"]["fps_steps"],
         settings["arrays"]["wb_steps"]
     )
 
     logging.info("--- Initialization Complete ---")
     
-    # # Stop splash and clear screen so the shell prompt is visible again
-    # splash_stop.set()
-    # splash_thread.join()
-    fb_splash.show(Image.new("RGB", fb_splash.size, "black"))   # blank
-    # fb_splash.close()        # optional
+    # Stop splash screen and clear framebuffer/tty
+    if fb_splash:
+        fb_splash.show(Image.new("RGB", fb_splash.size, "black"))
+    elif splash_stop:
+        splash_stop.set()
+        splash_thread.join()
     clear_screen()
     
     # Ensure system cleanup on exit
     cleanup_called = False
 
     # Ensure system cleanup on exit
     def cleanup():
         nonlocal cleanup_called
         if cleanup_called:
             return
         cleanup_called = True
         logging.info("Shutting down components...")
         redis_controller.set_value(ParameterKey.IS_RECORDING.value, 0)
         redis_controller.set_value(ParameterKey.IS_WRITING.value, 0)
         redis_controller.set_value(
             ParameterKey.FPS_LAST.value,
             redis_controller.get_value(ParameterKey.FPS.value)
         )
 
         # Stop peripherals
         dmesg_monitor.join()
         if hasattr(dmesg_monitor, "stop"):
             dmesg_monitor.stop() 
         if hasattr(command_executor, "stop"):
             command_executor.stop()
         command_executor.join()
         cinepi_controller.stop()
         serial_handler.running = False
         serial_handler.join()
 
         if i2c_oled:
             i2c_oled.join()
 
         if simple_gui:
             simple_gui.stop()              # <— new: quit the thread
             simple_gui.clear_framebuffer() # <— new: blank fb0
 
+        if fb_splash:
+            fb_splash.show(Image.new("RGB", fb_splash.size, "black"))
+        elif splash_stop:
+            splash_stop.set()
+            splash_thread.join()
+
         clear_screen()                     # wipe tty1
         show_cursor()
         
     atexit.register(cleanup)
     
     def handle_exit(sig, frame):
         logging.info("Graceful shutdown initiated.")
         cleanup()                 # stop your threads, join them if you like
         # restore default handler and re-raise
         signal.signal(signal.SIGINT, signal.SIG_DFL)
         os.kill(os.getpid(), signal.SIGINT)
 
     signal.signal(signal.SIGINT, handle_exit)
     signal.signal(signal.SIGTERM, handle_exit)
 
 
     try:
         from signal import pause
         pause()
     except Exception:
         logging.error("An unexpected error occurred:\n" + traceback.format_exc())
         sys.exit(1)
 
 if __name__ == "__main__":
     main()
diff --git a/src/module/config_loader.py b/src/module/config_loader.py
index c2ff35209e3fd3abfd2eae97b1742d6cc54dc94f..fe5e075f8c137dce080c952625077e6bb354a260 100644
--- a/src/module/config_loader.py
+++ b/src/module/config_loader.py
@@ -13,50 +13,52 @@ def load_settings(filename: str | Path) -> dict:
     try:
         with filename.open("r", encoding="utf-8") as fp:
             settings = json.load(fp)
     except FileNotFoundError:
         logging.warning("Settings file %s not found – using built-in defaults", filename)
         settings = {}
     except Exception as e:
         logging.error("Failed to load settings %s: %s – using built-in defaults", filename, e)
         settings = {}
 
     # ── top-level placeholders ───────────────────────────────────────────
     settings.setdefault("gpio_output",     {})
     settings.setdefault("arrays",          {})
     settings.setdefault("settings",        {"light_hz": [50, 60], "conform_frame_rate": 24})
     settings.setdefault("analog_controls", {})
     settings.setdefault("free_mode",       {
         "iso_free":       False,
         "shutter_a_free": False,
         "fps_free":       False,
         "wb_free":        False,
     })
     settings.setdefault("buttons",              [])
     settings.setdefault("two_way_switches",     [])
     settings.setdefault("rotary_encoders",      [])
     settings.setdefault("quad_rotary_encoders", {})
+    settings.setdefault("welcome_message", "THIS IS A COOL MACHINE")
+    settings.setdefault("welcome_image", None)
 
     # ── preview / zoom defaults ──────────────────────────────────────────
     preview_defaults = {
         "default_zoom": 1.0,
         "zoom_steps"  : [1.0, 1.5, 2.0],
     }
     preview_cfg = settings.setdefault("preview", {})
     for k, v in preview_defaults.items():
         preview_cfg.setdefault(k, v)
 
     # tidy up preview section
     preview_cfg["zoom_steps"] = sorted(set(preview_cfg["zoom_steps"]))
     if preview_cfg["default_zoom"] not in preview_cfg["zoom_steps"]:
         preview_cfg["default_zoom"] = preview_cfg["zoom_steps"][0]
     settings["preview"] = preview_cfg
 
     # ── anamorphic preview defaults (used by CinePiController) ───────────
     ana_defaults = {
         "anamorphic_steps":         [1.00, 1.33, 2.00],
         "default_anamorphic_factor": 1.00,
     }
     ana_cfg = settings.setdefault("anamorphic_preview", {})
     for k, v in ana_defaults.items():
         ana_cfg.setdefault(k, v)
     settings["anamorphic_preview"] = ana_cfg
diff --git a/src/settings.json b/src/settings.json
index 6c2a7863d27b17ea8ab14ffc8369e486258a3ab9..26320f336dee00d18e5878b9856df2f3bec8c9cd 100644
--- a/src/settings.json
+++ b/src/settings.json
@@ -160,27 +160,29 @@
       "clk_pin": 12,
       "dt_pin": 20,
       "encoder_actions": {
         "rotate_clockwise": {"method": "inc_wb", "args": []},
         "rotate_counterclockwise": {"method": "dec_wb", "args": []}
       }
     }
   ],
 
   "quad_rotary_encoders": {
     "0": {"setting_name": "iso", "gpio_pin": 5},
     "1": {"setting_name": "shutter_a", "gpio_pin": 16},
     "2": {"setting_name": "fps", "gpio_pin": 26},
     "3": {"setting_name": "wb", "gpio_pin": 5}
   },
 
   "i2c_oled": {
     "enabled": true,
     "width": 128,
     "height": 64,
     "font_size": 30,
     "values": [
       "write_speed_to_drive"
 
     ]
-  }
+  },
+  "welcome_message": "THIS IS A COOL MACHINE",
+  "welcome_image": null
 }
diff --git a/src/settings.schema.json b/src/settings.schema.json
index 1ab303733dc7e118e8e19b0ac5a15e30842608cc..a21f5edb84ef4e8b54614c91413cbd9736ce10b0 100644
--- a/src/settings.schema.json
+++ b/src/settings.schema.json
@@ -27,28 +27,36 @@
           "items": {
             "anyOf": [
               {
                 "type": "string",
                 "enum": [
                   "iso",
                   "shutter_a",
                   "fps",
                   "wb_user",
                   "is_recording",
                   "resolution",
                   "cpu_load",
                   "cpu_temp",
                   "memory_usage",
                   "space_left"
                 ]
               },
               {
                 "type": "string"
               }
             ]
           }
         }
       }
     },
+    "welcome_message": {
+      "type": "string",
+      "default": "THIS IS A COOL MACHINE"
+    },
+    "welcome_image": {
+      "anyOf": [{"type": "string"}, {"type": "null"}],
+      "default": null
+    },
     "additionalProperties": true
   }
 }
\ No newline at end of file
EOF
