{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Cinemate documentation.</p>"},{"location":"cinepi-multi/","title":"How Cinemate launches cinepi-raw","text":"<p><code>cinemate/src/module/cinepi_multi.py</code>  starts one <code>cinepi-raw</code> process per connected camera. It takes user settings from <code>sensor_detect.py</code> and <code>settings.json</code> to influence the command-line flags passed to <code>cinepi-raw</code>.</p> <p>Here it how it works:</p>"},{"location":"cinepi-multi/#1-detecting-cameras","title":"1. Detecting Cameras","text":"<p>When CineMate starts, <code>CinePiManager</code> runs <code>cinepi-raw --list-cameras</code>. Each line of output describes a connected sensor. The manager parses this output and stores basic information about every camera:</p> <ul> <li>index \u2013 numeric index passed to <code>--camera</code></li> <li>model \u2013 sensor model name (e.g. <code>imx477</code>)</li> <li>mono \u2013 whether the camera is monochrome</li> </ul> <p>This information is kept in the <code>CameraInfo</code> class and written to Redis under the <code>cam_info</code> keys so that other modules know which sensors are present.</p>"},{"location":"cinepi-multi/#2-loading-resolution-data","title":"2. Loading Resolution Data","text":"<p><code>cinepi_multi.py</code> relies on <code>sensor_detect.py</code> to look up valid resolutions and frame rates for each sensor. The mapping lives in <code>src/module/sensor_detect.py</code> and is organised like this:</p> <pre><code>sensor_resolutions = {\n    'imx477': {\n        0: {'width': 2028, 'height': 1080, 'bit_depth': 12, 'fps_max': 50},\n        1: {'width': 2028, 'height': 1520, 'bit_depth': 12, 'fps_max': 40},\n        # ...\n    },\n    'imx585_mono': {\n        0: {'width': 1928, 'height': 1090, 'bit_depth': 12, 'fps_max': 87},\n    }\n}\n</code></pre> <p>If you add support for a new sensor or want to tweak maximum frame rates, modify this dictionary. <code>cinepi_multi</code> calls <code>get_resolution_info()</code> to fetch the entry for the detected model and sensor mode (stored in Redis as <code>sensor_mode</code>).</p> <p>Note that there is a diference between driver sensor modes and Cinemate sensor modes . Driver sensor modes are presented with the terminal command <code>cinepi-raw --list-cameras</code> and then used by the list in <code>src/module/sensor_detect.py</code> to match the Cinemate / user sensor mode with the actual one. This is a bit clumsy so future updates aim at having sensor modes loaded dynamically. What firther complicate things is that libcameras sensor numbering dows not match the physical port numbering, which Cinemate uses for its mapping of preview to HDMI ports. So this need to be sorted out somehow. :)</p>"},{"location":"cinepi-multi/#3-building-the-cinepi-raw-command","title":"3. Building the <code>cinepi-raw</code> Command","text":"<p>For each detected camera the manager creates a <code>CinePiProcess</code>. The <code>_build_args()</code> method constructs a list of command-line flags for <code>cinepi-raw</code>:</p> <ol> <li>Resolution flags \u2013 <code>--mode</code>, <code>--width</code>, <code>--height</code> are taken from <code>sensor_detect</code>.</li> <li>Preview size \u2013 low\u2011resolution dimensions are calculated so that the preview fits inside the HDMI framebuffer. The values are stored in Redis as <code>lores_width</code> and <code>lores_height</code>.</li> <li>Geometry \u2013 the <code>geometry</code> section in <code>settings.json</code> allows you to rotate or flip each camera. These settings translate to <code>--rotation</code>, <code>--hflip</code> and <code>--vflip</code> flags.</li> <li>Output mapping \u2013 the <code>output</code> section chooses which HDMI connector each camera uses. The primary camera shows a preview window unless <code>--nopreview</code> is specified.</li> <li>Synchronization \u2013 if more than one camera is present, the first one is started with <code>--sync server</code> and the rest with <code>--sync client</code> so that frame capture is aligned.</li> </ol> <p>Here is a simplified example of the resulting command:</p> <pre><code>cinepi-raw --camera 0 --mode 2028:1080:12:U \\\n           --width 2028 --height 1080 \\\n           --lores-width 1280 --lores-height 720 \\\n           --hdmi-port 0 --rotation 0 --hflip 0 --vflip 0 \\\n           --tuning-file /home/pi/libcamera/src/ipa/rpi/pisp/data/imx477.json\n</code></pre> <p>Secondary cameras would receive <code>--nopreview</code> and a different <code>--hdmi-port</code> based on your settings.</p> <p><code>cinepi_multi.py</code> lives in <code>src/module/</code>. If you want to change how arguments are built, look inside the <code>_build_args()</code> method. The rest of the file deals with process management, log forwarding and readiness checks.</p>"},{"location":"cinepi-multi/#4-waiting-for-cameras-to-become-ready","title":"4. Waiting for Cameras to Become Ready","text":"<p>Each <code>cinepi-raw</code> instance prints <code>Encoder configured</code> when it has finished initialising. <code>cinepi_multi</code> watches the output and sets a Redis key like <code>cinepi_ready_cam0</code>. The manager waits until every launched camera reports ready before CineMate proceeds. This ensures that the very first REC command is seen by all sensors simultaneously.</p>"},{"location":"cinepi-multi/#5-customising-behaviour","title":"5. Customising Behaviour","text":"<ul> <li><code>sensor_detect.py</code> \u2013 add new entries or adjust values under <code>sensor_resolutions</code> if you connect a sensor with different modes. The dictionary format mirrors the command-line <code>--mode</code> flag.</li> <li><code>settings.json</code> \u2013 update the <code>geometry</code> and <code>output</code> sections for per\u2011camera rotation, flipping and HDMI mapping. These settings are read at startup and directly influence the arguments passed to <code>cinepi-raw</code>.</li> </ul>"},{"location":"cli-commands/","title":"Commands reference","text":""},{"location":"cli-commands/#73-cinemate-pseudo-cli","title":"7.3 CineMate \"Pseudo-CLI\"","text":"<p>CineMate doesn\u2019t use a real shell parser. Instead, a background thread reads simple text commands from SSH or the serial port and calls the corresponding controller methods.</p>"},{"location":"cli-commands/#available-commands","title":"Available Commands","text":"Command Input type Example Discussion <code>rec</code> / <code>stop</code> none <code>rec</code> Toggle recording on or off <code>set iso &lt;value&gt;</code> int <code>set iso 800</code> Set ISO to nearest allowed step <code>inc iso</code> / <code>dec iso</code> none <code>inc iso</code> Step ISO up or down <code>set shutter a &lt;angle&gt;</code> float <code>set shutter a 180</code> Set actual shutter angle (snaps unless free/sync) <code>inc shutter a</code> / <code>dec shutter a</code> none <code>inc shutter a</code> Cycle through shutter angles <code>set shutter a nom &lt;angle&gt;</code> float <code>set shutter a nom 180</code> Set nominal shutter angle for motion blur <code>inc shutter a nom</code> / <code>dec shutter a nom</code> none <code>inc shutter a nom</code> Step the nominal shutter angle <code>set fps &lt;value&gt;</code> float <code>set fps 24</code> Change frame rate (snaps unless free) <code>inc fps</code> / <code>dec fps</code> none <code>inc fps</code> Step through FPS list <code>set wb [&lt;Kelvin&gt;]</code> int or none <code>set wb 5600</code> Set white balance or cycle presets <code>inc wb</code> / <code>dec wb</code> none <code>inc wb</code> Cycle white balance steps <code>set resolution [&lt;mode&gt;]</code> int or none <code>set resolution 2</code> Apply or cycle sensor mode <code>set anamorphic factor [&lt;float&gt;]</code> float or none <code>set anamorphic factor 1.33</code> Set or toggle anamorphic stretch <code>set zoom [&lt;float&gt;]</code> float or none <code>set zoom 2</code> Change digital zoom; omit to cycle <code>inc zoom</code> / <code>dec zoom</code> none <code>inc zoom</code> Step preview zoom factor <code>mount</code> / <code>unmount</code> none <code>mount</code> Mount or unmount external storage <code>toggle mount</code> none <code>toggle mount</code> Mount if not mounted, otherwise unmount <code>time</code> none <code>time</code> Show system and RTC time <code>set rtc time</code> none <code>set rtc time</code> Copy system time to the RTC <code>space</code> none <code>space</code> Report remaining SSD space <code>get</code> none <code>get</code> Print all current settings <code>set shutter a sync [0/1]</code> 0/1 or none <code>set shutter a sync 1</code> Enable exposure sync mode <code>set iso lock [0/1]</code> 0/1 or none <code>set iso lock</code> Lock or unlock ISO setting <code>set shutter a nom lock [0/1]</code> 0/1 or none <code>set shutter a nom lock</code> Lock or unlock nominal shutter <code>set shutter a nom fps lock [0/1]</code> 0/1 or none <code>set shutter a nom fps lock 1</code> Lock nominal shutter and FPS together <code>set fps lock [0/1]</code> 0/1 or none <code>set fps lock 1</code> Lock or unlock the frame rate <code>set all lock [0/1]</code> 0/1 or none <code>set all lock 0</code> Toggle all exposure locks at once <code>set fps double [0/1]</code> 0/1 or none <code>set fps double</code> Instant or toggled 2\u00d7 FPS mode <code>reboot</code> / <code>shutdown</code> none <code>reboot</code> Safely reboot or halt the Pi <code>restart camera</code> none <code>restart camera</code> Restart the libcamera pipeline <code>restart cinemate</code> none <code>restart cinemate</code> Restart the Cinemate process <code>set iso free [0/1]</code> 0/1 or none <code>set iso free 1</code> Allow any ISO instead of presets <code>set shutter a free [0/1]</code> 0/1 or none <code>set shutter a free 0</code> Allow any shutter angle <code>set fps free [0/1]</code> 0/1 or none <code>set fps free 1</code> Allow any FPS <code>set wb free [0/1]</code> 0/1 or none <code>set wb free</code> Allow any white balance <code>set filter &lt;0/1&gt;</code> 0/1 <code>set filter 1</code> Toggle IR-cut filter (IMX585) <p>Commands without an explicit argument will toggle the current state when possible (e.g. <code>set fps lock</code> flips the lock; <code>set fps lock 1</code> forces it on).</p>"},{"location":"cli-user-guide/","title":"CinePi-raw CLI User Guide","text":"<p>This guide explains how to start CinePi-raw from the command line. The tool is a fork of the <code>rpicam-apps</code> project and allows capturing CinemaDNG files using Raspberry Pi cameras. The examples below assume you have installed the software and its dependencies as described in the repository README.</p>"},{"location":"cli-user-guide/#1-checking-available-options","title":"1. Checking available options","text":"<p>Before running the program you can view all command\u2011line flags with:</p> <pre><code>cinepi-raw -h\n</code></pre> <p>This prints a long list of options supported by the application. It includes the standard parameters from <code>rpicam-apps</code> (such as resolution and exposure settings) plus additional flags specific to the CinePi project. If you just want to confirm that your build works, you can also display the version number using:</p> <pre><code>cinepi-raw --version\n</code></pre>"},{"location":"cli-user-guide/#2-camera-modes","title":"2. Camera modes","text":"<p>CinePi-raw uses Libcamera to talk to your Raspberry Pi camera module. Each sensor supports one or more modes, which define the resolution and bit depth of the RAW images that the sensor can produce. A mode is written as:</p> <pre><code>&lt;width&gt;:&lt;height&gt;:&lt;bit-depth&gt;[:&lt;packing&gt;]\n</code></pre> <ul> <li><code>width</code> and <code>height</code> select the active pixel area of the sensor.</li> <li><code>bit-depth</code> is usually 12 or 16 bits per pixel.</li> <li><code>packing</code> can be <code>P</code> for packed or <code>U</code> for unpacked data. </li> </ul> <p>The mode must match the sensor you are using. For example, an IMX477 camera can run at <code>4056:3040:12</code> (full sensor) or at smaller cropped resolutions. When specifying a mode you typically also set the output <code>--width</code> and <code>--height</code> which control the size of the image written to disk. These can be equal to the mode values or smaller when scaling is applied.</p>"},{"location":"cli-user-guide/#3-lowresolution-lores-stream","title":"3. Low\u2011resolution (lores) stream","text":"<p>CinePi-raw can produce a secondary low\u2011resolution stream alongside the full\u2011resolution RAW frames. This is useful for monitoring or for algorithms that need a lighter image to work with. You enable it using:</p> <pre><code>--lores-width &lt;pixels&gt; --lores-height &lt;pixels&gt;\n</code></pre> <p>Setting either width or height to <code>0</code> disables the lores output.</p>"},{"location":"cli-user-guide/#4-preview-window","title":"4. Preview window","text":"<p>By default the program opens an HDMI preview so you can see what the camera captures. The size and position of this window are controlled with:</p> <pre><code>-p x,y,width,height\n</code></pre> <p>For example <code>-p 0,30,1920,1020</code> positions the preview 30 pixels from the top of the screen with a 1920\u00d71020 window. If you do not want any preview, use <code>--nopreview</code>.</p> <p>CineMate (the companion project) uses the preview window for its graphical interface, so you can adjust it to fit your monitor or leave it fullscreen with <code>--fullscreen</code>.</p>"},{"location":"cli-user-guide/#5-postprocessing-and-tuning-files","title":"5. Post\u2011processing and tuning files","text":"<p>Two JSON files influence how frames are processed:</p> <ol> <li>Tuning file \u2013 describes the camera\u2019s colour and lens characteristics. Use <code>--tuning-file &lt;path&gt;</code> to point to a file supplied with Libcamera (for example <code>imx477.json</code> for the HQ camera or <code>imx585.json</code> for the Sony IMX585 sensor).</li> <li>Post\u2011process file \u2013 for cinepi-raw, this file defines the port used by cpp-mjpeg-streamer (default :8000)</li> </ol>"},{"location":"cli-user-guide/#6-cinematespecific-flags","title":"6. Cinemate\u2011specific flags","text":"<p>The CineMate fork introduces several extra options:</p> Flag Description <code>--cam-port &lt;string&gt;</code> Select the physical CSI port to use (<code>cam0</code> or <code>cam1</code>). <code>--hdmi-port &lt;int&gt;</code> Choose the HDMI connector for the preview: <code>0</code> = HDMI\u20110, <code>1</code> = HDMI\u20111, <code>-1</code> = auto. <code>--same-hdmi</code> Force both capture and controller GUI to share the same HDMI output. <code>--keep16</code> Save full 16\u2011bit DNGs instead of 12\u2011bit packed files. <p>At this moment though, Cinemate is 12bit only. The flag is for future updates of the IMX585 16bit clear HDR modes.</p>"},{"location":"cli-user-guide/#7-example-commands","title":"7. Example commands","text":"<p>Below are sample commands for different sensors and modes. </p>"},{"location":"cli-user-guide/#imx477-12bit-full-width","title":"IMX477 (12\u2011bit, full width)","text":"<pre><code>cinepi-raw --mode 4056:2160:12 --width 4056 --height 2160 \\\n           --lores-width 1280 --lores-height 720 \\\n           -p 0,30,1920,1020 \\\n           --post-process-file /home/pi/post-processing.json \\\n           --tuning-file /home/pi/libcamera/src/ipa/rpi/pisp/data/imx477.json \\\n</code></pre>"},{"location":"cli-user-guide/#imx585-12bit-unpacked","title":"IMX585 (12\u2011bit unpacked)","text":"<pre><code>cinepi-raw --mode 1928:1090:12:U --width 1928 --height 1090 \\\n           --lores-width 1280 --lores-height 720 \\\n           -p 0,30,1920,1020 \\\n           --post-process-file /home/pi/post-processing.json \\\n           --tuning-file /home/pi/libcamera/src/ipa/rpi/pisp/data/imx585.json \\\n</code></pre> <p>Now, with an SSH shell running redis-cli you should be able to capture RAW footage from the command line!</p>"},{"location":"controller-methods/","title":"CinePi Controller Methods","text":"<p>CineMate exposes most of its runtime features through the <code>CinePiController</code> class in <code>src/module/cinepi_controller.py</code>. Buttons, the pseudo\u2011CLI and the web UI all call these methods. Below is an overview of the most useful ones and what they do.</p>"},{"location":"controller-methods/#recording","title":"Recording","text":"<ul> <li><code>rec()</code> \u2013 Toggle recording on or off depending on the current state.</li> <li><code>start_recording()</code> \u2013 Begin recording if storage is mounted and space is available.</li> <li><code>stop_recording()</code> \u2013 Stop the current recording.</li> </ul>"},{"location":"controller-methods/#exposure-settings","title":"Exposure settings","text":"<p>These methods adjust ISO, shutter angle and frame rate. Increment/decrement helpers step through the arrays defined in <code>settings.json</code> unless free mode is active.</p> <ul> <li><code>set_iso(value)</code> \u2013 Set ISO to a specific value.</li> <li><code>inc_iso()</code> / <code>dec_iso()</code> \u2013 Step ISO up or down.</li> <li><code>set_shutter_a(value)</code> \u2013 Set the actual shutter angle. In normal mode the value snaps to the nearest valid angle.</li> <li><code>inc_shutter_a()</code> / <code>dec_shutter_a()</code> \u2013 Cycle through shutter angles.</li> <li><code>set_shutter_a_nom(value)</code> \u2013 Set the nominal shutter angle used for motion\u2011blur calculations.</li> <li><code>inc_shutter_a_nom()</code> / <code>dec_shutter_a_nom()</code> \u2013 Step the nominal shutter angle.</li> <li><code>set_fps(value)</code> \u2013 Apply a new frame rate while respecting locks and sync mode.</li> <li><code>inc_fps()</code> / <code>dec_fps()</code> \u2013 Step through the configured FPS list.</li> </ul>"},{"location":"controller-methods/#white-balance","title":"White balance","text":"<ul> <li><code>set_wb(kelvin=None, direction='next')</code> \u2013 Set white balance to a specific Kelvin temperature or cycle through presets if no value is given.</li> <li><code>inc_wb()</code> / <code>dec_wb()</code> \u2013 Move to the next or previous white balance preset.</li> </ul>"},{"location":"controller-methods/#resolution-and-preview","title":"Resolution and preview","text":"<ul> <li><code>set_resolution(value=None)</code> \u2013 Switch sensor mode. Passing <code>None</code> cycles through the available modes.</li> <li><code>set_anamorphic_factor(value=None)</code> \u2013 Change the preview\u2019s anamorphic stretch. Omit the value to toggle between presets.</li> <li><code>set_zoom(value=None, direction=\"next\")</code> \u2013 Adjust the digital zoom factor. Without a value it steps through <code>preview.zoom_steps</code>.</li> <li><code>inc_zoom()</code> / <code>dec_zoom()</code> \u2013 Convenience wrappers around <code>set_zoom()</code>.</li> </ul>"},{"location":"controller-methods/#storage-control","title":"Storage control","text":"<ul> <li><code>mount()</code> / <code>unmount()</code> \u2013 Mount or unmount the external drive.</li> <li><code>toggle_mount()</code> \u2013 Convenience method that mounts when no drive is present and unmounts otherwise.</li> </ul>"},{"location":"controller-methods/#system-information","title":"System information","text":"<ul> <li><code>print_settings()</code> \u2013 Log all current Redis parameters.</li> <li><code>ssd_monitor.space_left()</code> \u2013 Report remaining disk space (used by the <code>space</code> CLI command).</li> <li><code>reboot()</code> \u2013 Safely reboot the Pi.</li> <li><code>safe_shutdown()</code> \u2013 Shut the Pi down cleanly.</li> <li><code>restart_cinemate()</code> \u2013 Restart the Cinemate Python process without rebooting.</li> </ul>"},{"location":"controller-methods/#locks-and-sync-modes","title":"Locks and sync modes","text":"<p>These helpers prevent accidental changes or keep shutter speed in sync with FPS:</p> <ul> <li><code>set_shutter_a_sync_mode(value=None)</code> \u2013 Enable exposure\u2011sync mode (1) or normal mode (0). Omitting the value toggles the state.</li> <li><code>set_iso_lock(value=None)</code> \u2013 Toggle or explicitly set the ISO lock.</li> <li><code>set_shutter_a_nom_lock(value=None)</code> \u2013 Lock or unlock the nominal shutter angle.</li> <li><code>set_shu_fps_lock(value=None)</code> \u2013 Lock both shutter angle and FPS together.</li> <li><code>set_fps_lock(value=None)</code> \u2013 Lock or unlock the frame rate.</li> <li><code>set_all_lock(value=None)</code> \u2013 Toggle all three locks at once.</li> <li><code>set_fps_double(value=None)</code> \u2013 Temporarily double the frame rate. Omit the value to toggle.</li> </ul>"},{"location":"controller-methods/#freemode-toggles","title":"Free\u2011mode toggles","text":"<p>When free mode is enabled, the preset arrays from <code>settings.json</code> are ignored and you can dial any value supported by the sensor.</p> <ul> <li><code>set_iso_free(value=None)</code></li> <li><code>set_shutter_a_free(value=None)</code></li> <li><code>set_fps_free(value=None)</code></li> <li><code>set_wb_free(value=None)</code></li> </ul>"},{"location":"controller-methods/#sensorspecific-tools","title":"Sensor\u2011specific tools","text":"<ul> <li><code>set_filter(value=None)</code> \u2013 Enable or disable the StarlightEye IR cut filter (IMX585 sensors only).</li> </ul>"},{"location":"coverpage/","title":"Cinemate Docs","text":"<p>Built: 2025-07-17 02:00 UTC</p>"},{"location":"install-guide/","title":"Installing CinePi and Cinemate","text":"<p>This guide walks you through installing the <code>cinepi-raw</code> fork and the Cinemate UI on a fresh Bookworm installation. Lite version of Bookworm also works.</p>"},{"location":"install-guide/#dependencies","title":"Dependencies","text":""},{"location":"install-guide/#node-version-manager","title":"Node Version Manager","text":"<pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\nsource ~/.bashrc\nnvm install --lts\n</code></pre>"},{"location":"install-guide/#cpp-mjpeg-streamer","title":"cpp-mjpeg-streamer","text":"<pre><code>sudo apt install -y libspdlog-dev libjsoncpp-dev\ncd /home/pi\ngit clone https://github.com/Tiramisioux/cpp-mjpeg-streamer.git --branch cinemate\ncd cpp-mjpeg-streamer &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. &amp;&amp; make\nmake install-here\n</code></pre>"},{"location":"install-guide/#cinepi-raw","title":"cinepi-raw","text":"<p>Cinemate depends on a custom branch of [cinepi-raw](https://github.com/Tiramisioux/cinepi-raw/tree/rpicam-apps_1.7_custom_encoder, created by Csaba Nagy.</p> <pre><code>git clone https://github.com/Tiramisioux/cinepi-raw.git --branch rpicam-apps_1.7_custom_encoder\ncd /home/pi/cinepi-raw\nsudo rm -rf build (if you have a previous build)\nexport PKG_CONFIG_PATH=/home/pi/cpp-mjpeg-streamer/build:$PKG_CONFIG_PATH\nsudo meson setup build\nsudo ninja -C build\nmeson install -C build\n</code></pre> <p>Join the CinePi Discord here!</p>"},{"location":"install-guide/#configure-the-raspberry-pi","title":"Configure the Raspberry Pi","text":""},{"location":"install-guide/#update-enable-i2c-and-setting-hostname","title":"Update &amp; enable I\u00b2C and setting hostname","text":"<pre><code>sudo apt update &amp;&amp; apt upgrade\nsudo raspi-config nonint do_i2c 0\nsudo hostnamectl set-hostname cinepi\n</code></pre> <p>Now you will find the pi as <code>cinepi.local</code> on the local network, or at the hotspot Cinemate creates</p>"},{"location":"install-guide/#update-bootfirmwareconfigtxt","title":"Update <code>/boot/firmware/config.txt</code>","text":"<pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> <p>Paste this into your file, and uncomment the sensor you are using.</p> <p>Also specify which physical camera port you have connected your sensor to.</p> <pre><code># Raspberry Pi HQ camera\n#camera_auto_detect=1\n#dtoverlay=imx477,cam0\n\n# Raspberry Pi GS camera\n#camera_auto_detect=1\n#dtoverlay=imx296,cam0\n\n# OneInchEye\n#camera_auto_detect=0\n#dtoverlay=imx283,cam0\n\n# StarlightEye\ncamera_auto_detect=0\ndtoverlay=imx585,cam0\n\n# StarlightEye Mono\ncamera_auto_detect=0\n#dtoverlay=imx585,cam1,mono\n\n# CFE Hat (pi 5 only)\ndtparam=pciex1\ndtparam=pciex1_gen=3\n\ndtoverlay=disable-bt\n\n[cm4]\n# Enable host mode on the 2711 built-in XHCI USB controller.\n# This line should be removed if the legacy DWC2 controller is required\n# (e.g. for USB device mode) or if USB support is not required.\notg_mode=1\n\n[all]\nusb_max_current_enable=1\n#dtoverlay=vc4-kms-DPI-4inch\n#dtoverlay=waveshare-touch-4dpi\navoid_warnings=1\ndisable_splash=1\n#boot_delay=0\n#power_off_on_halt=1\n</code></pre>"},{"location":"install-guide/#add-the-imx585-tuning-file-optional","title":"Add the IMX585 tuning file (optional)","text":"<p><pre><code>curl -L -o /home/pi/libcamera/src/ipa/rpi/pisp/data/imx585.json \\\n  https://raw.githubusercontent.com/will127534/libcamera/master/src/ipa/rpi/pisp/data/imx585.json\nsed -i '8s/\"black_level\": *[0-9]\\+/\"black_level\": 0/' /home/pi/libcamera/src/ipa/rpi/pisp/data/imx585.json\n# cp /home/pi/libcamera/src/ipa/rpi/pisp/data/imx585.json /usr/local/share/libcamera/ipa/rpi/pisp/\n</code></pre> For the mono sensor use <code>imx585_mono.json</code> instead.</p>"},{"location":"install-guide/#ir-filter-switch-script-optional","title":"IR filter switch script (optional)","text":"<pre><code>wget https://raw.githubusercontent.com/will127534/StarlightEye/master/software/IRFilter -O /usr/local/bin/IRFilter\nsudo chmod +x /usr/local/bin/IRFilter\n</code></pre> <p>Cinemate has its own way of handling the IR switch but the installation above can be convenient for use outside of Cinemate</p>"},{"location":"install-guide/#change-the-console-font-optional","title":"Change the console font (optional)","text":"<p>This can be useful if running the Pi on a small HD field monitor</p> <pre><code>sudi apt update\nsudo apt install console-setup kbd\nsudo dpkg-reconfigure console-setup  # choose Terminus / 16x32\n</code></pre> <p>Verify <code>/etc/default/console-setup</code> contains: <pre><code>FONTFACE=\"Terminus\"\nFONTSIZE=\"16x32\"\n</code></pre> Then enable the service: <pre><code>sudo systemctl enable console-setup.service\nsudo systemctl start console-setup.service\n</code></pre></p>"},{"location":"install-guide/#create-post-processing-configs","title":"Create post-processing configs","text":"<p>Paste this into the terminal and hit enter: <pre><code>sudo bash -c 'cat &gt; post-processing.json &lt;&lt; EOF\n{\n    \"sharedContext\": {},\n    \"mjpegPreview\": {\n        \"port\": 8000\n    }\n}\nEOF' &amp;&amp; \\\nsudo chmod +x post-processing.json &amp;&amp; \\\nsudo bash -c 'cat &gt; post-processing0.json &lt;&lt; EOF\n{\n    \"sharedContext\": {},\n    \"mjpegPreview\": {\n        \"port\": 8000\n    }\n}\nEOF' &amp;&amp; \\\nsudo chmod +x post-processing0.json &amp;&amp; \\\nsudo bash -c 'cat &gt; post-processing1.json &lt;&lt; EOF\n{\n    \"sharedContext\": {},\n    \"mjpegPreview\": {\n        \"port\": 8001\n    }\n}\nEOF' &amp;&amp; \\\nsudo chmod +x post-processing1.json\n</code></pre></p>"},{"location":"install-guide/#install-pishrink","title":"Install PiShrink","text":"<pre><code>wget https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh\nsudo install -m755 pishrink.sh /usr/local/bin/pishrink\n</code></pre> <p>Reboot before installing Cinemate:</p> <pre><code>reboot\n</code></pre>"},{"location":"install-guide/#install-cinemate","title":"Install Cinemate","text":""},{"location":"install-guide/#create-a-python-virtual-environment","title":"Create a Python virtual environment","text":"<pre><code>sudo apt update &amp;&amp; apt install -y python3-venv\npython3 -m venv /home/pi/.Cinemate-env\necho \"source /home/pi/.Cinemate-env/bin/activate\" &gt;&gt; ~/.bashrc\nsource /home/pi/.Cinemate-env/bin/activate\n</code></pre>"},{"location":"install-guide/#grant-sudo-privileges-and-enable-i2c","title":"Grant sudo privileges and enable I\u00b2C","text":"<p><pre><code>echo \"pi ALL=(ALL) NOPASSWD: /home/pi/.Cinemate-env/bin/*\" | sudo tee /etc/sudoers.d/Cinemate-env\nsudo chown -R pi:pi /home/pi/.Cinemate-env\nsudo chown -R pi:pi /media &amp;&amp; chmod 755 /media\nsudo usermod -aG i2c pi\nsudo modprobe i2c-dev &amp;&amp; echo i2c-dev | sudo tee -a /etc/modules\necho \"pi ALL=(ALL) NOPASSWD: /home/pi/run_Cinemate.sh\" | sudo tee -a /etc/sudoers.d/pi_Cinemate\n</code></pre> Reboot so the group changes take effect:</p> <pre><code>reboot\n</code></pre>"},{"location":"install-guide/#install-dependencies","title":"Install dependencies","text":"<pre><code>source /home/pi/.Cinemate-env/bin/activate\npython3 -m pip install --upgrade pip setuptools wheel\nsudo apt-get install -y i2c-tools portaudio19-dev build-essential python3-dev python3-pip python3-smbus python3-serial git\npip3 install adafruit-circuitpython-ssd1306 watchdog psutil Pillow redis keyboard pyudev sounddevice smbus2 gpiozero RPI.GPIO evdev termcolor pyserial inotify_simple numpy rpi_hardware_pwm\npip3 uninstall -y Pillow &amp;&amp; pip3 install Pillow\npip3 install sugarpie flask_socketio board adafruit-blinka adafruit-circuitpython-seesaw luma.oled grove.py pigpio-encoder gpiod\nsudo apt install python3-systemd e2fsprogs ntfs-3g exfatprogs console-terminus\n</code></pre>"},{"location":"install-guide/#replace-rpigpio-with-lgpio","title":"Replace RPi.GPIO with lgpio","text":"<pre><code>sudo apt install -y swig python3-dev build-essential git\ngit clone https://github.com/joan2937/lg\ncd lg &amp;&amp; make\nsudo make install\ncd .. &amp;&amp; pip install lgpio\n</code></pre>"},{"location":"install-guide/#clone-the-cinemate-repo","title":"Clone the Cinemate repo","text":"<pre><code>git clone https://github.com/Tiramisioux/Cinemate.git\n</code></pre>"},{"location":"install-guide/#allow-mainpy-to-run-with-sudo","title":"Allow <code>main.py</code> to run with sudo","text":"<p>Edit the sudoers file:</p> <pre><code>sudo visudo\n</code></pre> <p>add this to the end of the file: <pre><code>pi ALL=(ALL) NOPASSWD: /home/pi/Cinemate/src/main.py\npi ALL=(ALL) NOPASSWD: /bin/mount, /bin/umount, /usr/bin/ntfs-3g\npi ALL=(ALL) NOPASSWD: /home/pi/Cinemate/src/logs/system.log\npi ALL=(ALL) NOPASSWD: /sbin/mount.ext4\n</code></pre></p>"},{"location":"install-guide/#enable-networkmanager","title":"Enable NetworkManager","text":"<pre><code>sudo systemctl enable NetworkManager --now\n</code></pre>"},{"location":"install-guide/#rotate-logs","title":"Rotate logs","text":"<p>Paste this into the terminal and hit enter:</p> <pre><code># tee /etc/logrotate.d/general_logs &lt;&lt;'EOP'\n/var/log/*.log {\n   size 100M\n   rotate 5\n   compress\n   missingok\n   notifempty\n}\nEOP\n</code></pre>"},{"location":"install-guide/#seed-redis-with-default-keys","title":"Seed Redis with default keys","text":"<pre><code>redis-cli &lt;&lt;'EOF'\nSET anamorphic_factor 1.0\nPUBLISH cp_controls anamorphic_factor\nSET bit_depth 12\nPUBLISH cp_controls bit_depth\n...\nEOF\n</code></pre> <p>(See the settings guide for the full list.)</p>"},{"location":"install-guide/#add-a-convenience-alias","title":"Add a convenience alias","text":"<p>Append to <code>~/.bashrc</code>:</p> <p><pre><code>alias Cinemate='python3 /home/pi/Cinemate/src/main.py'\n</code></pre> Then, inside <code>cinemate</code> folder:</p> <pre><code>make install\n</code></pre>"},{"location":"install-guide/#install-the-cinemate-services","title":"Install the Cinemate services","text":"<p>Cinemate with two small helper services under <code>services/</code>:</p> <ul> <li>storage-automount \u2013 mounts and unmounts removable drives such as SSDs,   NVMe enclosures and the CFE HAT. Partitions named <code>RAW</code> are attached at   <code>/media/RAW</code>; all others are mounted under <code>/media/&lt;LABEL&gt;</code>.</li> <li>wifi-hotspot \u2013 keeps a simple Wi\u2011Fi hotspot running via NetworkManager so   you can reach the web UI even without other networking. The SSID and password   come from the <code>system.wifi_hotspot</code> section of <code>settings.json</code>.</li> </ul> <p>Install and enable both services with:</p> <pre><code>cd /home/pi/Cinemate/services\nsudo make install\nsudo make enable\n</code></pre> <p>You can manage each one individually with <code>make &lt;action&gt;-&lt;service&gt;</code>, for example <code>make status-wifi-hotspot</code>.</p>"},{"location":"install-guide/#backing-up-the-sd-card","title":"Backing up the SD card","text":"<p>Create a compressed image:</p> <pre><code>sudo dd if=/dev/mmcblk0 bs=4M conv=sparse,noerror status=progress | \\ gzip -c &gt; /media/RAW/Cinemate_$(date +\"%Y%m%d_%H%M%S\").img.gz\n</code></pre> <p>Or use PiShrink for a smaller file:</p> <pre><code>sudo bash -euo pipefail -c '\n  ts=$(date +%Y%m%d_%H%M%S)\n  raw=\"/media/RAW/Cinemate_${ts}.img\"\n  final=\"/media/RAW/Cinemate_${ts}.img.gz\"\n  dd if=/dev/mmcblk0 of=\"$raw\" bs=4M conv=sparse,noerror status=progress\n  pishrink.sh -v -z \"$raw\" \"$final\"\n  rm -f \"$raw\"\n'\n</code></pre> <p>You now have cinepi-raw and Cinemate installed on your Raspberry Pi. Happy shooting!</p>"},{"location":"install-guide/#starting-cinemate","title":"Starting Cinemate","text":"<p>If you are not using the service file for autostart, anywhere in the terminal, type:</p> <pre><code>cinemate\n</code></pre> <p>This would be the recommended way of trying out Cinemate as you will get extended logging in the terminal which can be helpful when troubleshooting. The Cinemate logger also relays logging messages from the running cinepi-raw instance.</p>"},{"location":"install-guide/#extra-stuff","title":"Extra stuff","text":""},{"location":"install-guide/#hotspot-logic","title":"Hotspot logic","text":"<p>If <code>wifi_hotspot</code> in <code>settings.json</code> is <code>true</code> and no hotspot is active, Cinemate starts its own hotspot <code>nmcli device wifi hotspot</code> using your chosen SSID and password. If the Pi is already connected to wifi (for example WiFi settings set with <code>sudo raspi-config</code>) this connection will be replaced by Cinemates hotspot. Set <code>enabled: false</code> to keep wlan0 free for regular Wi\u2011Fi use. </p> <p>Note that Cinemate still streams its web gui on whatever network the Pi is connected to, with GUI at :5000 and clean preview without GUI on :8000/stream"},{"location":"install-guide/#building-cinepi-raw","title":"Building cinepi-raw","text":"<p>For easy later rebuilding and installation of cinepi-raw you can create this file [to be added]</p>"},{"location":"install-guide/#managing-the-cinemate-autostart-service","title":"Managing the cinemate-autostart service","text":"<pre><code># Here are the available Make commands for managing the service:\n\nmake install   # copy service file\nmake enable    # start on boot\nmake start     # launch now\nmake stop      # stop it\nmake status    # check status\nmake disable   # disable autostart\nmake clean     # remove the service\n</code></pre> <p>Note that in order for the web ui to work properly you have to run <code>make install</code> once in the <code>/home/pi/cinemate</code> folder, even if you are not using the autostart service.</p>"},{"location":"install-guide/#managing-the-storage-automount-and-wifi-hotspot-services","title":"Managing the storage-automount and wifi-hotspot services","text":"<p>Cinemate ships with two small helper services under <code>services/</code>:</p> <ul> <li>storage-automount \u2013 mounts and unmounts removable drives such as SSDs,   NVMe enclosures and the CFE HAT. Partitions named <code>RAW</code> are attached at   <code>/media/RAW</code>; all others are mounted under <code>/media/&lt;LABEL&gt;</code>.</li> <li>wifi-hotspot \u2013 keeps a simple Wi\u2011Fi hotspot running via NetworkManager so   you can reach the web UI even without other networking. The SSID and password   come from the <code>system.wifi_hotspot</code> section of <code>settings.json</code>.</li> </ul> <p>Install and enable both services with:</p> <pre><code>cd /home/pi/cinemate/services\nsudo make install\nsudo make enable\n</code></pre> <p>You can manage each one individually with <code>make &lt;action&gt;-&lt;service&gt;</code>, for example <code>make status-wifi-hotspot</code>.</p>"},{"location":"install-guide/#storage-automount-service","title":"storage-automount service","text":"<p><code>storage-automount</code> is a systemd service that watches for removable drives and mounts them automatically. The accompanying Python script reacts to udev events and the CFE-HAT eject button so drives can be attached or detached safely.</p> <p>It understands <code>ext4</code>, <code>ntfs</code> and <code>exfat</code> filesystems. Partitions labelled <code>RAW</code> are mounted at <code>/media/RAW</code>; any other label is mounted under <code>/media/&lt;LABEL&gt;</code> after sanitising the name. This applies to USB SSDs, NVMe drives and the CFE-HAT slot.</p> <p>To manually install and enable the service:</p> <pre><code>cd cinemate/services/storage-automount\nsudo make install\nsudo make enable\n</code></pre> <p>You can stop or disable it later with: <pre><code>sudo make stop\nsudo make disable\n</code></pre></p>"},{"location":"install-guide/#wifi-hotspot-service","title":"wifi-hotspot service","text":"<p><code>wifi-hotspot</code> keeps a small access point running with the help of NetworkManager so you can always reach the web interface. The SSID and password are read from <code>/home/pi/cinemate/src/settings.json</code> under <code>system.wifi_hotspot</code>.</p> <p>Install and enable it with:</p> <pre><code>cd cinemate/services/wifi-hotspot\nsudo make install\nsudo make enable\n</code></pre> <p>As with <code>storage-automount</code>, you can stop or disable the hotspot with <code>make stop</code> and <code>make disable</code>.</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":"<p>TBA</p>"},{"location":"redis-guide/","title":"Redis API quick start","text":"<p>Cinemate talks to the cinepi-raw recorder through a local Redis server. Parameters such as ISO, FPS or the recording state are stored as simple keys. Two pub-sub channels (<code>cp_controls</code> and <code>cp_stats</code>) carry notifications and status updates.</p> <p>Here is an overview of how the pieces fit together and how you can experiment with them using <code>redis-cli</code> or your own Python scripts.</p>"},{"location":"redis-guide/#how-cinemate-and-cinepi-raw-interact","title":"How CineMate and cinepi-raw interact","text":"<p>Cinepi-raw exposes an API over Redis. Cinemate acts as the user interface. When you change a value in Cinemate (for example by pressing a button or turning a rotary encoder) it writes the new value to Redis and publishes the key name on the <code>cp_controls</code> channel. <code>cinepi-raw</code> subscribes to this channel and reacts to changes.</p> <p>Conversely, cinepi-raw periodically publishes camera statistics on the <code>cp_stats</code> channel. Cinemate listens and updates the on-screen GUI.</p>"},{"location":"redis-guide/#the-cp_controls-channel","title":"The <code>cp_controls</code> channel","text":"<p>CineMate writes values and immediately publishes the key name. The recorder only reacts when it receives that publish event. </p> <p>Any key may be sent this way. For example, to adjust the preview zoom:</p> <pre><code># Set preview zoom level\n\nredis-cli SET zoom 1.5\nredis-cli PUBLISH cp_controls zoom\n</code></pre> <p>Execpt for the recording trigger is_recording. Here, the Cinemate cinepi-raw fork immediately starts and stops recording upon edge detection (the variable changes from 0 to 1 or vice versa). The reason  for this exception has to do with how the cinepi-raw fork handles recording with multiple cameras</p> <pre><code># Start recording\nredis-cli SET is_recording 1                    # triggers 0 \u2192 1 edge\n\n# Stop recording\nredis-cli SET is_recording 0                    # triggers 1 \u2192 0 edge\n</code></pre>"},{"location":"redis-guide/#the-cp_stats-channel","title":"The <code>cp_stats</code> channel","text":"<p>Every frame, cinepi-raw sends a small JSON object containing live statistics. </p> <pre><code>    Json::Value data;\n    Json::Value histo;\n    data[\"framerate\"] = completed_request-&gt;framerate;\n    data[\"colorTemp\"] = info.colorTemp;\n    data[\"focus\"] = info.focus;\n    data[\"frameCount\"] = app_-&gt;GetEncoder()-&gt;getFrameCount();\n    data[\"bufferSize\"] = app_-&gt;GetEncoder()-&gt;bufferSize();\n    redis_-&gt;publish(CHANNEL_STATS, data.toStyledString());\n</code></pre> <p>CineMate\u2019s <code>RedisListener</code> parses these messages and updates Redis keys like <code>framecount</code>, <code>BUFFER</code> and <code>fps_actual</code>.</p>"},{"location":"redis-guide/#inspecting-and-changing-values-with-redis-cli","title":"Inspecting and changing values with <code>redis-cli</code>","text":"<p>Because everything is plain Redis you can poke around from the command line. Here are a few handy commands:</p> <pre><code># List all keys\nredis-cli KEYS '*'\n\n# Read the current ISO value\nredis-cli GET iso\n\n# Start a recording (same as pressing the Rec button)\nredis-cli SET is_recording 1\nredis-cli PUBLISH cp_controls is_recording\n</code></pre>"},{"location":"redis-guide/#controlling-the-camera-from-your-own-script","title":"Controlling the camera from your own script","text":"<p>You can use any Redis client. Below is a very small example using <code>redis-py</code>:</p> <pre><code>import redis\nr = redis.Redis(host='localhost', port=6379, db=0)\n\n# toggle recording\ncurrent = r.get('is_recording')\nnew_value = b'0' if current == b'1' else b'1'\nr.set('is_recording', new_value)\nr.publish('cp_controls', 'is_recording')\n</code></pre> <p>Note that in this example, the publishing of the is_recording key is not strictly needed for recording to start/stop, but for formality's sake I think we should keep the publish command.</p>"},{"location":"redis-keys/","title":"Redis key reference","text":"<p>This page lists all Redis keys used by Cinemate and cinepi-raw.  Values are simple strings so you can read or write them with <code>redis-cli</code>.</p> <p>Each entry explains which component normally writes the key and what happens when you change it manually.</p> Key Written by Description Safe to change manually? anamorphic_factor Cinemate Preview squeeze for anamorphic lenses Yes (publish key to apply) iso Cinemate \u2192 cinepi-raw Sensor gain in ISO Yes shutter_a Cinemate \u2192 cinepi-raw Actual shutter angle in degrees Yes shutter_angle_nom Cinemate Desired shutter angle before sync/free adjustments Yes shutter_a_sync_mode Cinemate Keep exposure constant when changing FPS Yes fps Cinemate \u2192 cinepi-raw Target frames per second Yes sensor_mode Cinemate \u2192 cinepi-raw startup Active sensor resolution/mode Yes (causes pipeline restart) wb Cinemate \u2192 cinepi-raw White\u2011balance temperature (Kelvin) Yes zoom Cinemate Digital zoom for preview streams Yes ir_filter Cinemate \u2192 cinepi-raw Toggle IR\u2011cut filter (IMX585 only) Yes rec / is_recording Cinemate \u2192 cinepi-raw Start/stop recording when toggled Yes (edge\u2011triggered) bit_depth Cinemate \u2192 cinepi-raw startup Sensor bit depth (10 or 12) No (set at startup) height / width Cinemate \u2192 cinepi-raw startup Active sensor resolution No lores_width / lores_height cinepi-raw startup Preview stream resolution No cg_rb Cinemate \u2192 cinepi-raw White\u2011balance gain pair \"1/R,1/B\" Yes (advanced) fps_user Cinemate Temporary storage for the UI slider No fps_last Cinemate Previous stable fps from stats No fps_actual cinepi-raw \u2192 Cinemate Measured FPS from pipeline No framecount cinepi-raw \u2192 Cinemate Total frames recorded No buffer cinepi-raw \u2192 Cinemate Raw frames currently in RAM No buffer_size cinepi-raw  \u2192  Cinemate Size of RAM buffer in frames No is_buffering cinepi-raw \u2192 Cinemate 1 while buffer pre\u2011fills No is_writing cinepi-raw \u2192 Cinemate 1 while frames are flushing to disk No is_writing_buf Cinemate Internal countdown after recording stops No is_mounted Cinemate (SSD monitor) 1 when storage is mounted No storage_type Cinemate (SSD monitor) Drive type (NVME/USB/SD) No space_left Cinemate (SSD monitor) Remaining space in GB No write_speed_to_drive Cinemate (SSD monitor) Current write speed MB/s No file_size Cinemate Bytes per frame for current mode No last_dng_cam0/1 cinepi-raw \u2192 Cinemate Path to last written DNG frame No recording_time Cinemate HH:MM:SS:FF timer while recording No memory_alert Cinemate 1 if RAM usage high No cam_init cinepi-raw Internal flag during startup No cameras cinepi-raw JSON list of detected cameras No gui_layout Cinemate Path to GUI layout preset No pi_model Cinemate Raspberry Pi model string No sensor cinepi-raw Active camera model No tc_cam0/tc_cam1 cinepi-raw \u2192 Cinemate SMPTE time code per camera No shutter_angle_actual Cinemate Calculated shutter angle applied after clamping or sync No shutter_angle_transient Cinemate Temporary value during ramping No exposure_time Cinemate Current exposure time in seconds No wb_user Cinemate Kelvin value set before converting to cg_rb No"},{"location":"settings-json/","title":"CineMate <code>settings.json</code> User Guide","text":"<p>This file controls how the camera behaves and how your buttons, switches and displays are mapped. It lives in <code>~/cinemate/src/settings.json</code> on the Raspberry\u00a0Pi. You can edit it with any text editor; the settings take effect the next time you start CineMate.</p> <p>The configuration is structured as JSON. Each top\u2011level key describes a feature area of the system. Below is a tour of every section and what the options do.</p>"},{"location":"settings-json/#1-welcome_message-and-welcome_image","title":"1. <code>welcome_message</code> and <code>welcome_image</code>","text":"<p>Text or image displayed briefly when Cinemate starts.</p> <pre><code>\"welcome_image\": null\n\"welcome_message\": \"THIS IS A COOL MACHINE\",\n</code></pre> <p>Set <code>welcome_image</code> to the path of a bitmap file to show a logo instead of text. </p> <p>Example path: <code>/home/pi/welcome_image.bmp</code>. </p> <p>If <code>welcome image</code> path is set, this will override the text message.</p>"},{"location":"settings-json/#2-system","title":"2. <code>system</code>","text":"<pre><code>\"system\": {\n  \"wifi_hotspot\": {\n    \"name\": \"CinePi\",\n    \"password\": \"11111111\",\n    \"enabled\": false\n  }\n}\n</code></pre> <ul> <li>name \u2013 the Wi\u2011Fi network name (SSID) broadcast by the Pi when hotspot mode is enabled.</li> <li>password \u2013 password for joining the hotspot.</li> <li>enabled \u2013 set to <code>true</code> to start the hotspot automatically on boot. If set to <code>false</code>, CineMate will still start its web ui but stream it on whatever network the Pi is connected to.</li> </ul>"},{"location":"settings-json/#3-geometry","title":"3. <code>geometry</code>","text":"<p>Controls image orientation for each camera port (<code>cam0</code>, <code>cam1</code>, etc.). These settings let you mount cameras in any orientation and still get an upright preview and recording. Example:</p> <pre><code>\"geometry\": {\n  \"cam0\": { \"rotate_180\": false, \"horizontal_flip\": false, \"vertical_flip\": false },\n  \"cam1\": { \"rotate_180\": false, \"horizontal_flip\": false, \"vertical_flip\": false }\n}\n</code></pre> <ul> <li>rotate_180 \u2013 flip the image upside\u2011down.</li> <li>horizontal_flip \u2013 mirror the image left/right.</li> <li>vertical_flip \u2013 mirror the image top/bottom.</li> </ul>"},{"location":"settings-json/#4-output","title":"4. <code>output</code>","text":"<p>Maps each camera to an HDMI connector. Use <code>-1</code> for automatic selection.</p> <pre><code>\"output\": {\n  \"cam0\": { \"hdmi_port\": 0 },\n  \"cam1\": { \"hdmi_port\": 1 }\n}\n</code></pre>"},{"location":"settings-json/#5-preview","title":"5. <code>preview</code>","text":"<p>Adjusts zoom levels for the HDMI/browser preview.</p> <pre><code>\"preview\": {\n  \"default_zoom\": 1.0,\n  \"zoom_steps\": [1.0, 1.5, 2.0]\n}\n</code></pre> <ul> <li>default_zoom \u2013 magnification factor used at startup.</li> <li>zoom_steps \u2013 list of zoom factors you can cycle through with the <code>set_zoom_step</code> command.</li> </ul>"},{"location":"settings-json/#6-anamorphic_preview","title":"6. <code>anamorphic_preview</code>","text":"<p>For stretching the preview when using anamorphic lenses.</p> <pre><code>\"anamorphic_preview\": {\n  \"default_anamorphic_factor\": 1,\n  \"anamorphic_steps\": [1, 1.33, 2.0]\n}\n</code></pre> <ul> <li>default_anamorphic_factor \u2013 factor loaded when Cinemate starts.</li> <li>anamorphic_steps \u2013 selectable squeeze factors; values above <code>1.0</code> widen the image.</li> </ul>"},{"location":"settings-json/#7-gpio_output","title":"7. <code>gpio_output</code>","text":"<p>Defines pins used for visual feedback or sync signals.</p> <pre><code>\"gpio_output\": {\n  \"pwm_pin\": 19,\n  \"rec_out_pin\": [6, 21]\n}\n</code></pre> <ul> <li> <p>pwm_pin \u2013 outputs a strobe for shutter sync or external devices.</p> </li> <li> <p>rec_out_pin \u2013 list of pins pulled high while recording (useful for tally LEDs).</p> </li> </ul>"},{"location":"settings-json/#8-arrays","title":"8. <code>arrays</code>","text":"<p>Preset lists for exposure and frame\u2011rate settings. Cinemate will step through these values unless you enable free mode, either in the settings file or during runtime.</p> <pre><code>\"arrays\": {\n  \"iso_steps\": [100, 200, 400, 640, 800, 1200, 1600, 2500, 3200],\n  \"shutter_a_steps\": [1, 45, 90, 135, 172.8, 180, 225, 270, 315, 346.6, 360],\n  \"fps_steps\": [1, 2, 4, 8, 12, 16, 18, 24, 25, 33, 40, 50],\n  \"wb_steps\": [3200, 4400, 5600]\n}\n</code></pre>"},{"location":"settings-json/#9-settings","title":"9. <code>settings</code>","text":"<p>General options for runtime behaviour.</p> <pre><code>\"settings\": {\n  \"light_hz\": [50, 60],\n  \"conform_frame_rate\": 24\n}\n</code></pre> <ul> <li>light_hz \u2013 list of mains frequencies used to calculate flicker\u2011free shutter angles. These are added to the shutter angle array and also dynamically calculated upon each fps change. This way, there is always a flicker free shutter angle value close by, when toggling through shutter angles, either via the cli or using buttons/pots/rotary encoder.</li> <li>conform_frame_rate \u2013 frame rate intendend for project conforming in post. This setting is not really used by CineMate except for calculating the recording timecode tracker in redis but might be used in future updates.</li> </ul>"},{"location":"settings-json/#10-analog_controls","title":"10. <code>analog_controls</code>","text":"<p>Maps Grove Base HAT ADC channels to analogue dials (potentiometers). Use <code>null</code> to disable a dial.</p> <pre><code>\"analog_controls\": {\n  \"iso_pot\": 0,\n  \"shutter_a_pot\": 2,\n  \"fps_pot\": 4,\n  \"wb_pot\": 6\n}\n</code></pre> <p>Note that even if you are using a Grove Base Hat, it might be useful to disable the dials not connected to pots, since noise from these connectors might trigger false readings.</p>"},{"location":"settings-json/#11-free_mode","title":"11. <code>free_mode</code>","text":"<p>When enabled, ignores the preset arrays and exposes the full range supported by the sensor.</p> <pre><code>\"free_mode\": {\n  \"iso_free\": false,\n  \"shutter_a_free\": false,\n  \"fps_free\": true,\n  \"wb_free\": false\n}\n</code></pre>"},{"location":"settings-json/#12-buttons","title":"12. <code>buttons</code>","text":"<p>Defines GPIO push buttons. Each entry describes one button and the actions it triggers.</p> <pre><code>{\n  \"pin\": 5,\n  \"pull_up\": true,\n  \"debounce_time\": 0.1,\n  \"press_action\": {\"method\": \"rec\"}\n}\n</code></pre> <ul> <li>pin \u2013 BCM pin number the button is connected to.</li> <li>pull_up \u2013 set <code>true</code> if the pin idles high (internal pull\u2011up). Use <code>false</code> for pull\u2011down wiring.</li> <li>debounce_time \u2013 ignore additional presses within this time window (seconds).</li> <li>press_action, single_click_action, double_click_action, triple_click_action, hold_action \u2013 actions to perform for each type of interaction. Actions call Cinemate CLI commands with optional <code>args</code>.</li> </ul>"},{"location":"settings-json/#how-inverse-1-0-1-buttons-are-auto-detected","title":"How \u201cinverse\u201d (1-0-1) buttons are auto-detected","text":"<p>Some push-buttons are wired closed = logic 1 and open = 0. At start-up, CineMate automatically detects buttons in state <code>true</code> and reverses them. This way the user can use any type of push buttons, both 1-0-1 and 0-1-0 types.</p>"},{"location":"settings-json/#13-two_way_switches","title":"13. <code>two_way_switches</code>","text":"<p>Latching on/off switches. Cinemate triggers an action whenever the state changes.</p> <pre><code>{\n  \"pin\": 27,\n  \"state_on_action\":  {\"method\": \"set_all_lock\", \"args\": [1]},\n  \"state_off_action\": {\"method\": \"set_all_lock\", \"args\": [0]}\n}\n</code></pre>"},{"location":"settings-json/#14-rotary_encoders","title":"14. <code>rotary_encoders</code>","text":"<p>Rotary encoders used for fine adjustment of settings. These can be wired straight to the GPIO pins of the Pi.</p> <pre><code>{\n  \"clk_pin\": 9,\n  \"dt_pin\": 11,\n  \"encoder_actions\": {\n    \"rotate_clockwise\":        {\"method\": \"inc_iso\"},\n    \"rotate_counterclockwise\": {\"method\": \"dec_iso\"}\n  }\n}\n</code></pre> <ul> <li>clk_pin and dt_pin \u2013 the two pins of the encoder.</li> <li>encoder_actions \u2013 commands to run when turning the dial.</li> </ul>"},{"location":"settings-json/#15-quad_rotary_encoders","title":"15. <code>quad_rotary_encoders</code>","text":"<p>Support for the Adafruit Neopixel Quad I2C rotary encoder breakout with four dials. Each entry assigns a dial to a setting and clones the behaviour of a button pin.</p> <pre><code>\"quad_rotary_encoders\": {\n  \"0\": {\"setting_name\": \"iso\", \"gpio_pin\": 5},\n  \"1\": {\"setting_name\": \"shutter_a\", \"gpio_pin\": 16},\n  \"2\": {\"setting_name\": \"fps\", \"gpio_pin\": 26},\n  \"3\": {\"setting_name\": \"wb\", \"gpio_pin\": 5}\n}\n</code></pre>"},{"location":"settings-json/#16-i2c_oled","title":"16. <code>i2c_oled</code>","text":"<p>Configuration for the optional OLED status screen. This can be useful for presenting extra information appart from the HDMI/web display.</p> <pre><code>\"i2c_oled\": {\n  \"enabled\": true,\n  \"width\": 128,\n  \"height\": 64,\n  \"font_size\": 30,\n  \"values\": [\"write_speed_to_drive\"]\n}\n</code></pre> <ul> <li>enabled \u2013 turn the OLED display on or off.</li> <li>width / height \u2013 pixel dimensions of your screen.</li> <li>font_size \u2013 size of the displayed text.</li> <li>values \u2013 list of Redis keys or pseudo\u2011keys to show (for example <code>cpu_temp</code>).</li> </ul> <p>Available keys come from <code>src/module/i2c_oled.py</code>. Here are some examples:</p> <ul> <li><code>iso</code>, <code>fps</code> \u2013 basic camera settings.</li> <li><code>shutter_a</code> \u2013 shown as SHUTTER with a <code>\u00b0</code> suffix.</li> <li><code>wb_user</code> \u2013 shown as WB with a trailing <code>K</code>.</li> <li><code>space_left</code> \u2013 displayed as SPACE in gigabytes.</li> <li><code>write_speed_to_drive</code> \u2013 write speed in MB/s.</li> <li><code>resolution</code> \u2013 prints <code>width\u00d7height@bit_depth</code> on the first line.</li> <li><code>is_recording</code> \u2013 draws a bullet <code>\u25cf</code> when recording.</li> <li><code>cpu_load</code>, <code>cpu_temp</code>, <code>memory_usage</code> \u2013 Pi system statistics.</li> </ul> <p>Other keys will display their name in uppercase and the raw value from Redis.</p>"}]}