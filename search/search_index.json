{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hide-sidebar-nav-and-toc-on-the-home-page","title":"Hide sidebar nav and TOC on the home page","text":""},{"location":"#_1","title":"Home","text":"<p>Welcome to the Cinemate documentation.</p> <p>Edit <code>docs/index.md</code> and hit save \u2013 the site updates automatically when running <code>mkdocs serve</code>.</p>"},{"location":"cli_commands/","title":"Cli commands","text":""},{"location":"cli_commands/#73-cinemate-pseudo-cli","title":"7.3 CineMate \u201cPseudo-CLI\u201d","text":"<p>CineMate doesn\u2019t use a real command-line parser or shell. Instead, it implements a \u201cpseudo-CLI\u201d inside the running Python process to let you type or send simple, human-readable commands over and SSH session and USB/serial Here\u2019s how it works:</p>"},{"location":"cli_commands/#available-commands","title":"Available Commands","text":"Command Argument(s) What it does <code>rec</code> / <code>stop</code> none Toggle recording on/off <code>set iso &lt;100\u20133200&gt;</code> <code>int</code> Set ISO (clamps to nearest valid step) <code>inc iso</code> / <code>dec iso</code> none Step ISO up/down <code>set shutter a &lt;float&gt;</code> <code>float</code> Set shutter angle (snaps unless in free/sync mode) <code>inc shutter a</code> / <code>dec shutter a</code> none Step shutter angle through dynamic list <code>set shutter a nom &lt;float&gt;</code> <code>float</code> Set nominal shutter (motion-blur target) <code>inc shutter a nom</code> / <code>dec shutter a nom</code> none Step nominal shutter angle <code>set fps &lt;float&gt;</code> <code>float</code> Set frames-per-second (snaps or free) <code>inc fps</code> / <code>dec fps</code> none Step FPS up/down <code>set wb [&lt;Kelvin&gt;]</code> <code>int</code> or none Set or cycle white balance <code>inc wb</code> / <code>dec wb</code> none Cycle WB up/down <code>set resolution [&lt;mode&gt;]</code> <code>int</code> or none Apply or cycle sensor-mode (restarts pipeline) <code>set anamorphic factor [&lt;float&gt;]</code> <code>float</code> or none Set/toggle anamorphic squeeze factor <code>mount</code> / <code>unmount</code> none Mount/unmount removable storage <code>time</code> none Print system + RTC time <code>set rtc time</code> none Sync RTC from system clock <code>space</code> none Log remaining SSD free space <code>get</code> none Pretty-print all current settings <code>set \u2026 lock</code> <code>0</code>/<code>1</code> or none Toggle or force-set locks on ISO / shutter / FPS <code>set fps double [0/1]</code> <code>0</code>/<code>1</code> or none Enable/disable instant or ramped 2\u00d7 FPS mode <code>set \u2026 free</code> <code>0</code>/<code>1</code> or none Unlock / re-lock \u201cfree\u201d ranges for ISO/shutter/FPS/WB <code>set filter &lt;0/1&gt;</code> <code>0</code>/<code>1</code> Toggle IR-cut filter (IMX585 only) <code>reboot</code> / <code>shutdown</code> none Safe OS reboot or halt (stops recording first) <code>restart</code> none Soft-restart only the libcamera pipeline <p>Note: Commands without an explicit argument will toggle state when meaningful (e.g. <code>set fps lock</code> flips the lock; <code>set fps lock 1</code> forces it on).</p>"},{"location":"cli_commands/#examples","title":"Examples","text":"<p>```text</p>"},{"location":"cli_commands/#start-recording","title":"Start recording","text":"<p>rec</p>"},{"location":"cli_commands/#lock-iso-so-it-cannot-change","title":"Lock ISO so it cannot change","text":"<p>set iso lock</p>"},{"location":"cli_commands/#double-the-frame-rate-instantly","title":"Double the frame rate instantly","text":"<p>set fps double 1</p>"},{"location":"cli_commands/#set-shutter-angle-to-1728-snaps-to-nearest-valid","title":"Set shutter angle to 172.8\u00b0 (snaps to nearest valid)","text":"<p>set shutter a 172.8</p>"},{"location":"cli_commands/#cycle-white-balance-to-the-next-step-in-your-wb_steps-array","title":"Cycle white balance to the next step in your wb_steps array","text":"<p>set wb</p>"},{"location":"cli_commands/#print-all-current-settings-iso-fps-shutter-etc","title":"Print all current settings (ISO, FPS, shutter, etc.)","text":"<p>get</p>"},{"location":"coverpage/","title":"Cinemate Docs","text":"<p>Built: 2025-07-08 22:44 UTC</p>"},{"location":"inverse_buttons/","title":"How \u201cinverse\u201d (1-0-1) buttons are auto-detected","text":"<p>Many latching push-buttons are wired closed = logic 1 at rest and open = 0 when pressed. At start-up each SmartButton performs:</p> <pre><code>if self.button.is_pressed:      # high at rest \u2192 treat as \u201cinverse\u201d\n    self.inverse = True\n</code></pre> <p>If so, the framework swaps the handlers:</p> <pre><code>when_pressed  \u2190 on_release\nwhen_released \u2190 on_press\n</code></pre>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":"<p>CineMate scripts is a way for users to implement and customize manual controls for their cinepi-raw build. </p> <p>Project aims at offering an easy way to build a custom camera. For basic operation and experimentation, Raspberry Pi, camera board and monitor is needed. For practical use, buttons and switches can easily be added.</p> <p>A ready made disk image can be found here.</p> <p>Join the CinePi Discord here.</p>"},{"location":"overview/#hardware-requirements","title":"Hardware requirements","text":"<ul> <li>Rasberry Pi 4/5 or CM4 module</li> <li>Official HQ or GS camera</li> <li>HDMI monitor or device (phone or tablet) for monitoring</li> </ul> <p>For recording, use a high speed NVME drive or CFE Hat by Will Whang. Drive needs to be formatted as ext4 and named \"RAW\".</p> <p>CineMate is also compatible with OneInchEye (Sony IMX 283) and StarlightEye (Sony IMX 585) by Will Whang. Works with CM4 module and Pi 5B.</p>"},{"location":"overview/#quickstart-guide","title":"Quickstart guide","text":"<p>1) Burn image to ssd card. 16 GB or larger.</p> <p>2) Connect Pi and camera sensor board</p>   When connecting the camera module to the Pi, make sure it is the Pi is not powered. It is not advised to hot-swap the camera cable. <p>3) Boot up the Pi. CineMate should autostart.</p>"},{"location":"overview/#connecting-to-pi-with-ssh","title":"Connecting to Pi with SSH:","text":"<pre><code>user: pi\npassword: 1\n</code></pre>"},{"location":"overview/#starting-cinemate-manually","title":"Starting CineMate manually","text":"<p>CineMate autostarts by default. </p> <p>To stop an autostarted CineMate instance:</p> <pre><code>systemctl stop cinemate-autostart\n</code></pre> <p>For enabling and disabling autostart see this section.</p> <p>For running CineMate manually from the cli type <code>cinemate</code>. This will also display extensive logging which can be useful when configuring and testing buttons and switches.</p>"},{"location":"overview/#adjusting-configtxt-for-different-sensors","title":"Adjusting config.txt for different sensors:","text":"<pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> <p>Uncomment the section for the sensor being used, and make sure to comment out the others. Reboot the Pi for changes to take effect.</p> <p>CineMate is compatible with Raspberry Pi HQ camera (imx477), Global Shutter camera (imx296), OneInchEye (imx283), StarlightEye (imx585) and Arducam imx519.</p>"},{"location":"overview/#external-monitoring","title":"External monitoring","text":"<p>To view on phone or other device, connect the phone to: </p> <p>Wifi <code>CinePi</code>  password <code>11111111</code>.</p> <p>In web browser, navigate to <code>cinepi.local:5000</code>. A clean feed (without GUI) is available at <code>cinepi.local:8000/stream</code>.</p>"},{"location":"overview/#recording","title":"Recording","text":"<p>External drive should be formatted as ntfs or ext4 and be labeled \"RAW\". </p> <p>For starting/stopping recording:  - in web browser: tap (or click) the preview screen - from CLI (running CineMate manually): type <code>rec</code> - via GPIO: attach a momentary switch (or simply short circuit) to GPIO 04 or 05 (can be changed in <code>home/pi/cinemate/src/settings.json</code>)</p> <p>A rec LED light can be connected to GPIO 21.</p>   When connecting an LED to the GPIOs, be sure to use a resistor <p>Note that cinemate v3 is based on cinepi-sdk-002 so it also has this issue\u2060, affecting write speed to drive. CFE Hat works great but fps in most cases is max 50 at the moment.</p>"},{"location":"overview/#simple-gui","title":"Simple GUI","text":"<p>Simple GUI is available via browser and/or attached HDMI monitor.</p> <ul> <li>Red color means camera is recording.</li> <li>Purple color means camera detected a drop frame </li> <li>Green color means camera is writing buffered frames to disk. </li> <li>Yellow color indicates low voltage warning.</li> <li>Numbers in lower left indicate frame count / frames in buffer. </li> </ul> <p>CineMate image automatically starts wifi hotspot <code>Cinepi</code>, password: <code>11111111</code>. Navigate browser to cinepi.local:5000 for simple web gui.</p>"},{"location":"overview/#cinemate-cli-commands","title":"CineMate CLI commands","text":"<p>When manually running CineMate from the CLI you can type simple commands. The table below includes all the available commands (method calls) + arguments for the CineMate CLI. GPIO column shows default settings of <code>cinemate/src/settings.json</code> and can be fully customized by the user. CineMate also listens for commands sent to the Pi via USB serial.</p> cinemate cli/usb serial command comment arguments GPIO button GPIO rotary encoder GPIO switch GPIO output <code>rec</code> start and stop recording None (toggle control) 5 <code>set iso</code> set iso to a value (chooses the closest value in the array defined in settings.json) integer <code>inc iso</code> increase iso value one step in the array - 13 clk 9, dt 11, bu 10 <code>dec iso</code> decrease iso value one step in the array - 10 clk 9, dt 11, bu 10 <code>set shutter a nom</code> set the nominal shutter angle to a value (chooses the closest value in the array defined in settings.json) float <code>inc shutter a nom</code> increase shutter angle value - clk 15, dt 18, bu 23 <code>dec shutter a nom</code> decrease shutter angle value - clk 15, dt 18, bu 23 <code>set fps</code> set fps to a value (chooses the closest value in the array defined in settings.json) integer <code>inc fps</code> increase fps value - clk 25, dt 8, bu 7 <code>dec fps</code> decrease fps value - clk 25, dt 8, bu 7 <code>set wb</code> set white balance to a value (chooses the closest value in the array defined in settings.json) integer <code>inc wb</code> increase white balance - clk 12, dt 20, bu 21 <code>dec wb</code> decrease white balance - clk 25, dt 8, bu 7 <code>set resolution</code> select the next available resolution option 0, 1 or None (toggle control) 13, 26 (single click) <code>set anamorphic factor</code> set or toggle the anamorphic factor (explicit value or toggle through anamorphic_steps) float or None (toggle control) <code>reboot</code> reboot the pi - 26 (double click) <code>shutdown</code> shutdown the pi - 26 (triple click) <code>unmount</code> unmount CFE card/SSD - 26 (hold for 3 sec)"},{"location":"overview/#example-cli-commands","title":"Example CLI commands","text":"<p>Start/stop recording:</p> <pre><code>&gt; rec\n</code></pre> <p>Adjust the ISO setting. Requires an integer argument.</p> <pre><code>&gt; set iso 800\n</code></pre> <p>Set the shutter angle. Requires a float argument for the angle.</p> <pre><code>&gt; set shutter a 172.8\n</code></pre> <p>Configure the frames per second. Requires an integer argument.</p> <pre><code>&gt; set fps 24\n</code></pre> <p>Lock/unlock iso, shutter angle or fps: Toggle locks or set them directly. Providing an argument directly sets the value. Omitting the argument will toggle the control.</p> <pre><code>&gt; set iso lock\n\n&gt; set shutter a nom lock 1\n\n&gt; set fps lock\n</code></pre> <p>Enable or disable doubling the FPS rate. </p> <pre><code>&gt; set fps_double\n\n&gt; set fps_double 1\n</code></pre>"},{"location":"overview/#cinemate-autostart-on-boot","title":"CineMate autostart on boot","text":"<p>Go to cinemate folder:</p> <pre><code>cd cinemate\n</code></pre> <p>To enable autostart:</p> <pre><code>make install\nmake enable\n</code></pre> <p>To stop the autostarted instance:</p> <pre><code>make stop\n</code></pre> <p>To start again:</p> <pre><code>make start\n</code></pre> <p>To disable autostart:</p> <pre><code>make disable\n</code></pre>"},{"location":"overview/#settings-file","title":"Settings file","text":""},{"location":"overview/#geometry-and-output-configuration","title":"Geometry and Output Configuration","text":"<p>CineMate supports multiple cameras with per\u2011port customization in your <code>settings.json</code>. Two key sections control this behavior:</p> <pre><code>{\n  \"geometry\": {\n    \"cam0\": {\n      \"rotate_180\": false,\n      \"horizontal_flip\": false,\n      \"vertical_flip\": true\n    },\n    \"cam1\": {\n      \"rotate_180\": true,\n      \"horizontal_flip\": false,\n      \"vertical_flip\": false\n    }\n  },\n  \"output\": {\n    \"cam0\": { \"hdmi_port\": 1 },\n    \"cam1\": { \"hdmi_port\": 0 }\n  }\n}\n</code></pre> <ul> <li>geometry.cam0/cam1: Defines image orientation for each physical camera port:</li> <li><code>rotate_180</code>: flip image upside\u2011down when <code>true</code>.</li> <li><code>horizontal_flip</code>: mirror image left\u2011to\u2011right when <code>true</code>.</li> <li> <p><code>vertical_flip</code>: mirror image top\u2011to\u2011bottom when <code>true</code>.</p> </li> <li> <p>output.cam0/cam1: Maps each camera to an HDMI output port. By default, <code>cam0</code>\u2192HDMI\u00a00 and <code>cam1</code>\u2192HDMI\u00a01, but you can remap as needed.</p> </li> </ul> <p>Continue with your existing settings configuration below.</p> <p>The settings file can be found in <code>/home/pi/cinemate/src/settings.json</code>. Here the user can define their own buttons, switches and rotary encoders.</p>"},{"location":"overview/#gpio-output","title":"GPIO output","text":"<p>Default rec LED pins are 6 and 21. Make sure to use a 220 Ohm resistor on this pin!</p> <pre><code>  \"gpio_output\": {\n    \"pwm_pin\": 19,\n    \"rec_out_pin\": [6, 21]\n  },\n</code></pre>"},{"location":"overview/#arrays","title":"Arrays","text":"<p>Set desired arrays for ISO, shutter angle values, fps and white balance.</p> <pre><code>  \"arrays\": {\n    \"iso_steps\": [100, 200, 400, 640, 800, 1200, 1600, 2500, 3200],\n    \"shutter_a_steps\": [1, 45, 90, 135, 172.8, 180, 225, 270, 315, 346.6, 360],\n    \"fps_steps\": [1, 2, 4, 8, 12, 16, 18, 24, 25, 33, 40, 50],\n    \"wb_steps\": [3200, 4400, 5600]\n  },\n</code></pre> <p>CineMate interpolates redis cg_rb settings used by libcamera based on the selected white balance value in the above array and the tuning file for the sensor being used.</p>"},{"location":"overview/#settings","title":"Settings","text":"<pre><code>  \"settings\": {\n    \"light_hz\": [50, 60]\n  }\n</code></pre> <p>CineMate dynamically adjusts the shutter_a_steps array on fps change, adding the flicker free angles given the current frame rate and the hz values defined by the user.</p>"},{"location":"overview/#anamorphic-preview","title":"Anamorphic preview","text":"<pre><code>    \"anamorphic_preview\": {\n      \"anamorphic_steps\": [1, 1.33, 2.0],\n      \"default_anamorphic_factor\": 1\n    }\n</code></pre> <p>The anamorphic_preview section allows users to define an array of selectable anamorphic factors (anamorphic_steps) and set a default value (default_anamorphic_factor). The anamorphic factor is used to adjust the aspect ratio of the preview.</p>"},{"location":"overview/#analog-controls","title":"Analog Controls","text":"<p>Default settings are <code>None</code>. Map Grove Base HAT ADC channels to iso, shutter angle, fps and white balance controls. </p> <pre><code>  \"analog_controls\": {\n    \"iso_pot\": 0,\n    \"shutter_a_pot\": 2,\n    \"fps_pot\": 4,\n    \"wb_pot\": 6\n  }\n</code></pre>"},{"location":"overview/#buttons","title":"Buttons","text":"<p>Setup buttons with actions for different interactions. Methods are the same as the CineMate CLI commands. Arguments can also be added here</p> <pre><code>{\n    \"pin\": 22,\n    \"pull_up\": \"False\",\n    \"debounce_time\": \"0.1\",\n    \"press_action\": {\"method\": \"set_all_lock\"},\n    \"single_click_action\": \"None\",\n    \"double_click_action\": \"None\",\n    \"hold_action\": {\"method\": \"restart_camera\"}\n}\n</code></pre> <p>Each button can be configured with a variety of actions based on different interactions:</p> <p>Press Action: Triggers a specified method upon a simple press.</p> <p>Single, Double, and Triple Click Actions: Specify methods to execute based on the number of successive clicks.</p> <p>Hold Action: Executes a method when the button is held down for a longer duration.</p> <p>Each action can specify a method that corresponds to a function within the application, and args, an array of arguments that the method requires.</p> <p>Note that if you have both a Press Action and a Single-Click action on a pin, the pin will first execute the Press Action and when released, execute the Single-Click Action. Combining Press Action and Click actions on the same pin is therefore not recommended.</p>"},{"location":"overview/#two-way-switches","title":"Two-way switches","text":"<p>Two-way switches are configured in the two_way_switches section and have actions for both states:</p> <p>State On Action and State Off Action: Define what actions to take when the switch is turned on or off, respectively. Similar to button actions, these can specify a method and args.</p> <pre><code>{\n    \"pin\": 16,\n    \"state_on_action\": {\"method\": \"set_shutter_a_sync\", \"args\": [false]},\n    \"state_off_action\": {\"method\": \"set_shutter_a_sync\", \"args\": [true]}\n}\n</code></pre>"},{"location":"overview/#rotary-encoders","title":"Rotary Encoders","text":"<p>Configure rotary encoders for settings adjustments and optional button presses:</p> <pre><code>{\n    \"clk_pin\": 9,\n    \"dt_pin\": 11,\n    \"encoder_actions\": {\n    \"rotate_clockwise\": {\"method\": \"inc_iso\", \"args\": []},\n    \"rotate_counterclockwise\": {\"method\": \"dec_iso\", \"args\": []}\n}\n</code></pre> <p>Clockwise and Counterclockwise Actions: Specify methods to execute when the encoder is rotated in either direction.</p> <p>Note that if rotary encoders with buttons are used, these are connected and defined as normal push buttons in the Button-section of the settings file.</p>"},{"location":"overview/#adafruit-neopixel-quad-rotary-encoder","title":"Adafruit Neopixel Quad Rotary Encoder","text":"<pre><code>  \"quad_rotary_encoders\": {\n    \"0\": {\"setting_name\": \"iso\", \"gpio_pin\": 5},\n    \"1\": {\"setting_name\": \"shutter_a\", \"gpio_pin\": 16},\n    \"2\": {\"setting_name\": \"fps\", \"gpio_pin\": 26},\n    \"3\": {\"setting_name\": \"wb\", \"gpio_pin\": 5}\n  }\n</code></pre>"},{"location":"overview/#defaults-encoder-push-buttons-settings","title":"Defaults encoder push buttons settings","text":"<ul> <li>Encoder 0 (ISO): Encoder push button clones behaviour of rec button on GPIO 5</li> <li>Encoder 1 (Shutter Angle): Encoder push button clones behaviour of fps double button in GPIO 16</li> <li>Encoder 2 (FPS): Encoder push button clones behaviour of system push button on GPIO 26</li> <li>Encoder 3 (White Balance): Encoder push button clones behaviour of rec button on GPIO 5</li> </ul> <p>These push buttons can be programmed to perform various functions like toggling locks, changing modes, or triggering specific actions, just like regular GPIO buttons. The <code>gpio_pin</code> setting clones the behaviour of pins defined in the Buttons section of the settings file.</p>"},{"location":"overview/#compatible-sensors","title":"Compatible sensors","text":"Sensor Cinemate sensor mode Resolution Aspect Ratio Bit Depth Max FPS* File Size (MB) IMX283 0 2736 x 1538 1.80 12 40 7.1 1 2736 x 1824 1.53 12 34 8.2 IMX296 0 1456 x 1088 1.33 12 60 2 IMX477 0 2028 x 1080 1.87 12 50 3.2 1 2028 x 1520 1.33 12 40 4.5 2 1332 x 990 1.34 10 120 2.8 IMX519 0 1280 x 720 1.77 10 80 7.1 1 1920 x 1080 1.77 10 60 8.2 2 2328 x 1748 1.77 10 30 8.2 3 3840 x 2160 1.77 10 18 31 IMX585 0 1928 x 1090 1.77 12 87 4 <p>'*' Note that maximum fps will vary according to disk write speed. For the specific fps values for your setup, make test recordings and monitor the output. Purple background in the monitor/web browser indicates drop frames. You can cap CineMates max fps values for your specific build by editing the file <code>cinemate/src/module/sensor_detect.py</code></p>"},{"location":"overview/#multi-camera-support","title":"Multi camera support","text":"<p>CineMate automatically detects each camera connected to the Raspberry Pi and spawns a separate <code>cinepi-raw</code> process per sensor. By default:</p> <ul> <li>Primary camera (first detected) displays its preview on HDMI port 0.</li> <li>Secondary cameras run with <code>--nopreview</code> and map to subsequent HDMI outputs (cam1\u2192HDMI\u00a01, cam2\u2192HDMI\u00a02, etc.).</li> <li>Preview windows are centered and sized according to your <code>geometry</code> settings.</li> </ul> <p>You can override default HDMI mappings in <code>settings.json</code> under the <code>output</code> section:</p>"},{"location":"overview/#additional-hardware","title":"Additional hardware","text":"<p>CineMate image file comes pre-installed with: - OneInchEye - StarlightEye - CFE Hat - Grove Base HAT</p>"},{"location":"overview/#pwm-mode-experimental","title":"PWM mode (experimental)","text":"<p>Trigger mode 2 sets the Raspberry Pi HQ/GS sensors in sink mode, as explained here: https://github.com/Tiramisioux/libcamera-imx477-speed-ramping</p> <p>This makes it possible to feed the sensor XVS input with hardware PWM signal from the pi (CineMate uses pin 19 as default, but pin 18 also supports hardware PWM), allowing for hardware control of fps and shutter angle during recording. By using a precise clock source this could potentially fix the fluctuating fps of image sensors, allowing for precise audio syncing.</p>   Note! Be sure to use a voltage divider so PWM signal is converted to 1.65V. <p>From my tests I have noticed that changing fps works fine, but sometimes camera has to be reset a couple of times to work properly (toggling the PWM mode button). Changing shutter angle in PWM mode (or having shutter angle sync engaged) also doesn't seem to work properly.</p>"},{"location":"overview/#backing-up-the-sd-card","title":"Backing up the SD card","text":"<p>To make a compressed image backup of the SD card onto the attached drive:</p> <pre><code>sudo sh -c 'pv -s $(blockdev --getsize64 /dev/mmcblk0) /dev/mmcblk0 | xz -3 -c &gt; /media/RAW/cinemate_v3-pi_4+5_bookworm_image_$(date +%Y-%m-%d_%H-%M-%S).img.xz'\n</code></pre> <p>Backing up CineMate image takes about 30 min.</p>"},{"location":"overview/#notes-when-using-pi-4","title":"Notes when using Pi 4","text":"<p>On Raspberry Pi 4 the tuning file currently fails to load properly for libcamera so no tuning file is applied to the actual image. The tuning file is used though for CineMate calculation of WB values.</p>"},{"location":"overview/#known-issues","title":"Known issues","text":"<ul> <li>Frame drops when using NTFS formatted SSD drives</li> <li>Recording stops after a couple of seconds when using ext4 formatted SSD drives    </li> </ul>"},{"location":"overview/#todo","title":"Todo","text":"<ul> <li>[x] fix shutter angle values array calculation</li> <li>[ ] simple_gui.py adaptive layout for non 1920x1080 screens</li> <li>[x] fix frame rate / shutter angle sync for constant exposure during fps change</li> <li>[x] mounting mechanism should be improved. Drives seem to not mount when detatched and then reconnected</li> <li>[x] anamorphic factor to be moved to settings file.</li> <li>[ ] 16 bit modes for imx585</li> <li>[ ] support for imx294</li> <li>[x] optimize recording to allow for the use of 300 MB/s SSD drive</li> <li>[x] optimize operating system for faster boot and smaller image file</li> <li>[ ] overclocking of ISP</li> <li>[ ] optional auto-exposure</li> <li>[ ] hardware sync of sensor frame capture, perhaps via a pico</li> <li>[ ] rendering mode, for creating proxy files in camera (using https://github.com/mrjulesfletcher/dng_to_video)</li> <li>[ ] automatic detection of attached sensor and dynamic dtoverlay</li> </ul>"},{"location":"settings-json/","title":"<code>settings.json</code> Cheat Sheet","text":"<p>A quick-reference table of every setting in <code>settings.json</code>, what it does, and its allowed values. <pre><code>    {\n      \"pin\": 27,\n      \"state_on_action\": {\"method\": \"set_all_lock\", \"args\": [1]},\n      \"state_off_action\": {\"method\": \"set_all_lock\", \"args\": [0]}\n    },\n</code></pre></p> <pre><code>if self.button.is_pressed:      # high at rest \u2192 treat as \u201cinverse\u201d\n    self.inverse = True\n</code></pre>"},{"location":"settings-json/#geometry","title":"Geometry","text":"JSON Path Description Values <code>geometry.camX.rotate_180</code> Rotate image 180\u00b0 on startup <code>true</code> / <code>false</code> <code>geometry.camX.horizontal_flip</code> Flip image horizontally on startup <code>true</code> / <code>false</code> <code>geometry.camX.vertical_flip</code> Flip image vertically on startup <code>true</code> / <code>false</code>"},{"location":"settings-json/#output","title":"Output","text":"JSON Path Description Values <code>output.camX.hdmi_port</code> Select DRM connector for HDMI output (<code>cinepi-raw --hdmi-port</code>) <code>0</code>, <code>1</code>, or <code>-1</code> (auto)"},{"location":"settings-json/#gpio-outputs","title":"GPIO Outputs","text":"JSON Path Description Values <code>gpio_output.pwm_pin</code> PWM pin for strobe / shutter sync BCM pin number (e.g. 19) <code>gpio_output.rec_out_pin</code> Pin(s) pulled high while recording List of BCM pins"},{"location":"settings-json/#fixed-palette-arrays","title":"Fixed-Palette Arrays","text":"JSON Path Description Values <code>arrays.iso_steps</code> ISO step presets (if <code>iso_free = false</code>) <code>[100,\u2026,sensor_native]</code> <code>arrays.shutter_a_steps</code> Shutter angles (if <code>shutter_a_free = false</code>) <code>[1.0,\u2026,360.0]</code> (degrees) <code>arrays.fps_steps</code> Frame-rate presets (if <code>fps_free = false</code>) integers \u2264 sensor-mode <code>fps_max</code> <code>arrays.wb_steps</code> White-balance Kelvin presets <code>[2000,\u2026,9000]</code> (Kelvin)"},{"location":"settings-json/#flicker-suppression","title":"Flicker Suppression","text":"JSON Path Description Values <code>settings.light_hz</code> Frequencies used to calculate flicker-free shutter angles <code>[50]</code>, <code>[60]</code>, or <code>[50,60]</code>"},{"location":"settings-json/#analog-controls","title":"Analog Controls","text":"JSON Path Description Values <code>analog_controls.*_pot</code> ADC channel for ISO, shutter, FPS, or WB (Grove HAT) <code>0\u20137</code> or <code>null</code>"},{"location":"settings-json/#free-mode-overrides","title":"Free-Mode Overrides","text":"<p>When <code>true</code>, ignores the fixed arrays and exposes full legal ranges.</p> JSON Path Description Values <code>free_mode.iso_free</code> Full ISO range <code>true</code> / <code>false</code> <code>free_mode.shutter_a_free</code> Full shutter-angle range <code>true</code> / <code>false</code> <code>free_mode.fps_free</code> Full frame-rate range <code>true</code> / <code>false</code> <code>free_mode.wb_free</code> Full white-balance range <code>true</code> / <code>false</code> <p>Free ranges: ISO 100\u20133200, Shutter 1.0\u00b0\u2013360.0\u00b0, FPS 1\u2013fps_max, WB 1000\u201310000 K</p>"},{"location":"settings-json/#anamorphic-preview","title":"Anamorphic Preview","text":"JSON Path Description Values <code>anamorphic_preview.anamorphic_steps</code> Anamorphic squeeze factors list of floats \u2265 1.0 <code>anamorphic_preview.default_anamorphic_factor</code> Initial factor stored in Redis on power-up one of the above"},{"location":"settings-json/#buttons-switches","title":"Buttons &amp; Switches","text":"JSON Path Description Values <code>buttons[]</code> SmartButton entries: <code>press_action</code>, <code>click_action</code>, <code>hold_action</code>, etc. List of BCM pins + args <code>two_way_switches[]</code> Latching switches: <code>state_on_action</code> / <code>state_off_action</code> <code>pin</code> + optional <code>pull_up</code> <code>three_way_switches[]</code> 3-position switches: <code>state_0/1/2_action</code> <code>pins</code>: [low, mid, high]"},{"location":"settings-json/#encoders","title":"Encoders","text":"JSON Path Description Values <code>rotary_encoders[]</code> GPIO rotary (CLK/DT) + optional button <code>clk_pin</code>, <code>dt_pin</code> BCM pins <code>quad_rotary_encoders</code> I\u00b2C RGB Encoder breakout (0x49) with four dials/buttons Indices <code>\"0\"</code>\u2013<code>\"3\"</code>"},{"location":"settings-json/#oled-status-screen","title":"OLED Status Screen","text":"JSON Path Description Values <code>i2c_oled.width</code> OLED panel width in pixels integer <code>i2c_oled.height</code> OLED panel height in pixels integer <code>i2c_oled.values</code> Redis keys or pseudo-keys to display (e.g. <code>cpu_temp</code>) ordered list <pre><code>if self.button.is_pressed:      # high at rest \u2192 treat as \u201cinverse\u201d\n    self.inverse = True\n</code></pre>"}]}